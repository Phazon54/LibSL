#ifndef _CG_IMAGE_PROCESSING_
#define _CG_IMAGE_PROCESSING_

#ifdef OPENGL

/// header OpenGL
#define CG_IMAGE_PROCESSING_SHADER_HEADER \
    struct VS_OUTPUT \
    { \
      float4 Pos         : POSITION; \
      float2 Tex         : TEXCOORD0; \
    }; \
    struct VS_INPUT \
    { \
        float4 Pos       : POSITION; \
        float2 Tex       : TEXCOORD0; \
    }; \
    float4 Viewport; \
    float2 DestRegionCoord; \
    float2 DestRegionSize; \
    float2 InvDestRegionSize; \
    VS_OUTPUT vs_image_processing(VS_INPUT In) \
    { \
      VS_OUTPUT o; \
      o.Pos = float4(float2(In.Pos.x,In.Pos.y) ,0.0,1.0); \
      o.Tex = DestRegionCoord + In.Tex*DestRegionSize; \
      return (o); \
    }

/// footer OpenGL
#define CG_IMAGE_PROCESSING_SHADER_FOOTER \
    technique t_main \
    { \
      pass P0 \
      { \
        VertexProgram   = compile CG_PROFILE_VP vs_image_processing(); \
  	FragmentProgram = compile CG_PROFILE_FP ps_main(); \
      } \
    }

#endif

#ifdef DIRECT3D

/// header Direct3D
#define CG_IMAGE_PROCESSING_SHADER_HEADER \
    struct VS_OUTPUT \
    { \
      float4 Pos         : POSITION; \
      float2 Tex         : TEXCOORD0; \
    }; \
    struct VS_INPUT \
    { \
        float4 Pos       : POSITION; \
        float2 Tex       : TEXCOORD0; \
    }; \
    float4 Viewport; \
    float2 DestRegionCoord; \
    float2 DestRegionSize; \
    float2 InvDestRegionSize; \
    VS_OUTPUT vs_image_processing(VS_INPUT In) \
    { \
      VS_OUTPUT o; \
      o.Pos = float4(float2(In.Pos.x,-In.Pos.y) + float2(-1.0,1.0) / Viewport.zw ,0.0,1.0); \
      o.Tex = DestRegionCoord + In.Tex*DestRegionSize; \
      return (o); \
    }

/// footer Direct3D
#define CG_IMAGE_PROCESSING_SHADER_FOOTER \
    technique t_main \
    { \
      pass P0 \
      { \
        VertexShader = compile CG_PROFILE_VP vs_image_processing(); \
  	PixelShader  = compile CG_PROFILE_FP ps_main(); \
      } \
    }

#endif

#endif
