/* --------------------------------------------------------------------
Author: Sylvain Lefebvre    sylvain.lefebvre@sophia.inria.fr

                  Simple Library for Graphics (LibSL)

This software is a computer program whose purpose is to offer a set of
tools to simplify programming real-time computer graphics applications
under OpenGL and DirectX.

This software is governed by the CeCILL-C license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-C
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-C license and that you accept its terms.
-------------------------------------------------------------------- */
// -----------------------------------------------------------------------
#include "LibSL.precompiled.h"
// -----------------------------------------------------------------------
#include "CgFillArray2D.h"
// -----------------------------------------------------------------------

#include <iostream>
#include <sstream>

#include <LibSL/CgHelpers/CgImageProcessing.h>

using namespace std;
using namespace LibSL::CgHelpers;

// -----------------------------------------------------------------------

#define NAMESPACE LibSL::GPUHelpers

// -----------------------------------------------------------------------

static char *s_ShaderPrefix =
"CG_IMAGE_PROCESSING_SHADER_HEADER\n";

static char *s_ShaderPostfix = 
"\n\nfloat4 ps_main(VS_OUTPUT In) : COLOR\n"
"{\n"
"  return compute(floor(In.Tex));\n"
"}\n"
"\n"
"CG_IMAGE_PROCESSING_SHADER_FOOTER\n";

// -----------------------------------------------------------------------

NAMESPACE::CgFillArray2D::CgFillArray2D(const char *code,int xsize,int ysize)
{
  m_UserCode     = string(code);
  m_W            = xsize;
  m_H            = ysize;
  m_bNeedCompile = true;
  m_PixelCounter = 0;
  // create render target
  m_RenderTarget=new t_RenderTarget(xsize,ysize);
  // create occlusion query
  m_OcclusionQuery=new OcclusionQuery();
  m_DoQuery=false;
  // clear
  m_RenderTarget->clear();
}

// -----------------------------------------------------------------------

NAMESPACE::CgFillArray2D::~CgFillArray2D()
{
  m_cgShader.terminate();
}

// -----------------------------------------------------------------------

void NAMESPACE::CgFillArray2D::generateCode(std::ostream& code)
{
  static char str[2048];
  code << "// ======== code automatically generated by LibSL::CgFillArray2D\n";
  // -> header
  code << string(s_ShaderPrefix);
  // -> inputs
  for (map<string,input_nfo>::iterator I=m_Inputs.begin();I!=m_Inputs.end();I++) {
    sprintf_s(str,1024,"sampler T_%s = sampler_state {\n",
	      (*I).first.c_str());
    code << string(str) << string(" MinFilter = Nearest; MagFilter = Nearest;"
				  " /* AddressU  = Clamp; AddressV  = Clamp; */}; \n\n");
    sprintf_s(str,1024,"float4 offset_%s=float4(0,0,0,0);\n",(*I).first.c_str());
    code << string(str);
    sprintf_s(str,1024,"static const float4 %s_SIZE=float4(%f,%f,1.0/%f,1.0/%f);\n",
	      (*I).first.c_str(),
	      (float)(*I).second.w,(float)(*I).second.h,
	      (float)(*I).second.w,(float)(*I).second.h);
    code << string(str);
    char comp_desc = (*I).second.numcomp == 1 ? ' ' : ('0'+(*I).second.numcomp);
    sprintf_s(str,1024,"float%c %s(float2 i) {\n",comp_desc,(*I).first.c_str());
    code << string(str);
    sprintf_s(str,1024,"  float%c v=tex2D(T_%s,((i+%s.xy)+0.5)/float2(%f,%f));\n",
	      comp_desc,
	      (*I).first.c_str(),
	      (string("offset_") + (*I).first).c_str(),
	      (float)(*I).second.w,(float)(*I).second.h);
    code << string(str);
    sprintf_s(str,1024,"  v=(%s);\n",(*I).second.decoder);
    code << string(str);
    sprintf_s(str,1024,"  return (v);\n}\n");
    code << string(str);
  }
  // -> user function
  code << endl << m_UserCode << endl;
  // -> techniques
  for (list<pair<string,string> >::iterator T=m_Techniques.begin();T!=m_Techniques.end();T++) {
    // wrapper function
    sprintf_s(str,1024,
      "float4 __ps_%s(VS_OUTPUT In) : COLOR {\n"
      "  return %s(floor(In.Tex));\n"
      "}\n",
      (*T).first.c_str(),(*T).second.c_str());
    code << string(str);
    // technique def
    sprintf_s(str,2048,
      "technique %s { pass P0 {\n"
      " %s  = compile %s vs_image_processing();\n"
      " %s  = compile %s __ps_%s();\n"
      "}}\n",
	      (*T).first.c_str(),
#ifdef OPENGL
        "VertexProgram",
#else
        "VertexShader",
#endif
	      "CG_PROFILE_VP",
#ifdef OPENGL
        "FragmentProgram",
#else
        "FragmentShader",
#endif
	      "CG_PROFILE_FP",
	      (*T).first.c_str());
    code << string(str);
  }
  // -> footer
  code << string(s_ShaderPostfix);
}

// -----------------------------------------------------------------------

void NAMESPACE::CgFillArray2D::compile()
{
  static char str[1024];
  std::stringstream shader_code;

  try {
    if (!m_bNeedCompile) return;
    // cerr << "[compiling]\n";
    // get shader code
    generateCode(shader_code);
    // compile
    m_cgShader.terminate();
    //cerr << "-==== Shader code =====- \n" << shader_code << endl;
    m_cgShader.init(shader_code.str().c_str());
    // set textures
    for (map<string,input_nfo>::iterator I=m_Inputs.begin();I!=m_Inputs.end();I++) {
      CgParameter param;
      sprintf_s(str,1024,"T_%s",(*I).first.c_str());
      param.init(m_cgShader,str);
      param.set((*I).second.api_texture);
    }
    m_bNeedCompile=false;
  } catch (CgException& e) {
    cerr << "\n\n\n                    -= ERROR - Cg Error =-" << endl;
    cerr << e.message();
    cerr << "\n\n\n";
    LIBSL_BOUNCE_ERROR(e);
  } 
}

// -----------------------------------------------------------------------

void NAMESPACE::CgFillArray2D::setShaderParameters()
{
  // set offsets
  static char str[1024];
  for (map<string,input_nfo>::iterator I=m_Inputs.begin();I!=m_Inputs.end();I++) {
    CgParameter param;
    sprintf_s(str,1024,"offset_%s",(*I).first.c_str());
    // cerr << "offs = " << (*I).second.offsetx << ',' << (*I).second.offsety << endl;
    param.init(m_cgShader,str);
    param.set((float)(*I).second.offsetx,(float)(*I).second.offsety);
  }
}

// -----------------------------------------------------------------------

void NAMESPACE::CgFillArray2D::compute()
{
  if (m_bNeedCompile) compile();

  setShaderParameters();
  
#ifdef DIRECT3D
  LIBSL_D3D_CHECK_ERROR(LIBSL_DIRECT3D_DEVICE->BeginScene());
#endif
  m_RenderTarget->bind();
  if (m_DoQuery) {
    m_OcclusionQuery->start();
  }
  m_cgShader.renderFull(m_W,m_H);
  if (m_DoQuery) {
    m_OcclusionQuery->stop();
    int num=0;
    while ((num=m_OcclusionQuery->done()) < 0) {}
    m_PixelCounter=num;
  }
  m_RenderTarget->unbind();
#ifdef DIRECT3D
  LIBSL_D3D_CHECK_ERROR(LIBSL_DIRECT3D_DEVICE->EndScene());
#endif
}

// -----------------------------------------------------------------------

void NAMESPACE::CgFillArray2D::computeRegion(int x,int y,int w,int h)
{
  if (m_bNeedCompile) compile();

  setShaderParameters();

  sl_assert(x < m_W && y < m_H && x >= 0 && y >= 0);
  sl_assert(x+w <= m_W && y+h <= m_H);

  m_RenderTarget->bind();
  if (m_DoQuery) {
    m_OcclusionQuery->start();
  }
  m_cgShader.renderRegion(x,y,w,h);
  if (m_DoQuery) {
    m_OcclusionQuery->stop();
    int num=0;
    while ((num=m_OcclusionQuery->done()) < 0) {}
    m_PixelCounter=num;
  }
  m_RenderTarget->unbind();  
}

// -----------------------------------------------------------------------

void NAMESPACE::CgFillArray2D::setCode(const char *code)
{
  m_bNeedCompile=true;
  m_UserCode    =string(code);
}

// -----------------------------------------------------------------------

void NAMESPACE::CgFillArray2D::addTechnique(const char *techname,const char *entrypoint)
{
  m_Techniques.push_back(make_pair(string(techname),string(entrypoint)));
}

// -----------------------------------------------------------------------

void NAMESPACE::CgFillArray2D::enablePixelCounter()
{
  m_DoQuery=true;
}

// -----------------------------------------------------------------------

void NAMESPACE::CgFillArray2D::disablePixelCounter()
{
  m_DoQuery=false;
}

// -----------------------------------------------------------------------

string NAMESPACE::CgFillArray2D::getCompiledCode()
{
  compile();
  // m_cgShader.getCompiledCode()
  /*
    LPD3DXBUFFER pDisassembly;
    D3DXDisassembleEffect(m_fxShader.effect(),false,&pDisassembly);
    
    string asmcode;
    if (pDisassembly != NULL) {
    asmcode=string((char *)pDisassembly->GetBufferPointer());
    pDisassembly->Release();
    } else {
    throw LibSL::Errors::Fatal("LibSL::CgFillArray2D::getAssemblyCode - cannot dissamble code !");
    }
    return (asmcode);
  */
  return string("[not yet implemented]");
}

// -----------------------------------------------------------------------
