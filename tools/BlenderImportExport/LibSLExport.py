################################################################################

# D:\WORK\LIBRARIES\LibSL_private\src\tools\BlenderImportExport

import sys
import os
import Blender
import string
import struct
import math
from Blender      import Types,Mesh
from Blender.Draw import *
from Blender.BGL  import *
print "\n======================================================"	# mark start of trace
print "Export starting."


################################################################################
#
# Section 1: setup.	This section sets up the required Python modules, creates
#			the GUI interface, and creates and initializes the global
#			variables.
#
################################################################################


#
#	Build the global objects/variables
#
exportFile = open ("dummy.mesh", "wb")	# Define the export output file as a global variable
exportFile.close()			# but don't leave it open
statusText = "Ready"			# The status reported on the GUI

#
#	Create the button objects.
#	Note:  Put your default export script file name and export directory file name here
#
filename    = Create("BlenderExport.mesh")					# <=== your file name
exportDir   = Create("d:\\temp")	# <=== your directory
useSelected = Create(0)
onlyMeshes  = Create(0)


################################################################################
#	Define the controls that draw the GUI interface.  Remember that the
#	Y axis increases from the bottom of the window towards the top.
################################################################################
def gui ():
	global filename, exportDir, useSelected, onlyMeshes, statusText 	# use globals for these vars

	glClearColor (0.216,0.460,0.474, 0.0)
	glClear (GL_COLOR_BUFFER_BIT)
	Button			("Process",		1, 10,  30,  140, 40, "Create a new export file")
	Button			("Exit",		2, 160, 30,  140, 40, "Exit this script")
	filename    = String	("Filename: ",		3, 10,  75,  270, 19, filename.val, 200, "export file name")
	Button			("...",			4, 281, 75,  19,  19, "Browse for file name")
	exportDir   = String	("File Dir: ",		5, 10,  100, 270, 19, exportDir.val, 200, "Export file directory")
	Button			("...",			6, 281, 100, 19,  19, "Browse for directory")
	useSelected = Toggle	("Use Selected Items",	7, 10,  125, 140, 19, useSelected.val, "Export only selected items")
	onlyMeshes  = Toggle	("Export Only Meshes",	8, 160, 125, 140, 19, onlyMeshes.val, "Export only mesh items")

	glRasterPos2i(10, 10)				# general text
	Text("Generic Exporter by Jack Emmerichs")
	glRasterPos2i(250, 10)				# status text
	Text(statusText)

################################################################################
#	Define the function that handles events generated outside this window
################################################################################
def event (evt, val):
	global exportFile
	if (evt == ESCKEY and not val): 	# push the escape key (end the script0\_
		closeFile(exportFile)
		exitScript()

################################################################################
#	Define the function that handles events generated by buttons inside this window
################################################################################
def bevent (evt):
	global exportFile
	if (evt == 1): 				# pushed the render button
		exportClick();
	if (evt == 2):				# pushed the exit button
		closeFile(exportFile) 
		exitScript()

#
#	Register the above three functions, now that they exist.
#
Register (gui, event, bevent)




################################################################################
#
# Section 2: functions.	This section defines the functions/procedures that contain
#			the rest of the script's code
#
################################################################################



################################################################################
#	Open the export file
#	Note that this function creates a new exportFile object and passes it
#	back to the caller who will replace the current global export File object 
#	with this one.
################################################################################
def openFile (exportFile):
	if (not exportFile.closed):
		exportFile.close();
	exportFile = open (os.path.join (exportDir.val, filename.val), "wb")
	print "------------------------------------------------------"	# mark start of export
	print "Opened: " + exportFile.name
	return exportFile


################################################################################
#	Close the export file
################################################################################
def closeFile (exportFile):
	if (not exportFile.closed):
		exportFile.close()
		print "Closed: " + exportFile.name
		print "------------------------------------------------------"	# mark end of export


################################################################################
#	Write a new line into the export file
################################################################################
def writeNewline (exportFile):
	exportFile.write('\n')

################################################################################
#	Write out the matrix for a mesh object.
################################################################################
def writeMatrix (exportFile, matrix):
	exportFile.write ("Transform: (%sx%s)\n" % (str(len(matrix)),str(len(matrix[0]))))
	index = 0
	for list in matrix:
		exportFile.write ("    [%s] %s\n" % (str(index), str(matrix[index])))
		index = index + 1

################################################################################
#	Write out a material object
################################################################################
def writeMaterial (exportFile, meshobj, material, materialName,materialCount):
#	exportFile.write ("    Got to writeMaterial\n")
	exportFile.write ("    [%s]: %s\n" % (str(materialCount), str(materialName)))
	exportFile.write ("        RGB Color:    [%s, %s, %s]\n" % (str(material.R), str(material.G), str(material.B)))
	exportFile.write ("        Alpha:        %s\n" % str(material.alpha))
	exportFile.write ("        Ambience:     %s\n" % str(material.amb))
	exportFile.write ("        Emit:         %s\n" % str(material.emit))
	exportFile.write ("        Reflection:   %s\n" % str(material.ref))
	exportFile.write ("        Specularity:  %s\n" % str(material.spec))
	exportFile.write ("        Specularity RGB: [%s, %s, %s]\n" % (str(material.specR), str(material.specG), str(material.specB)))
	exportFile.write ("        Mirror RGB:   [%s, %s, %s]\n" % (str(material.mirR), str(material.mirG), str(material.mirB)))       

################################################################################
#	Handle a mesh object within the scene
################################################################################
def writeMesh (exportFile, nextObject):
	meshobj = Blender.Object.Get(nextObject.name)
	mesh    = Blender.Mesh.Get(nextObject.name)
	if (not mesh):
		print "Mesh object not found for " + nextObject.name
		return

#
#	Print the transform matrix and other vector values
#
	# writeMatrix(exportFile, meshobj.matrix)
	# exportFile.write ("      Location:  %s\n" % str(meshobj.loc))
	# exportFile.write ("Delta Location:  %s\n" % str(meshobj.dloc))
	# exportFile.write ("      Rotation:  %s\n" % str(meshobj.rot))
	# exportFile.write ("Delta Rotation:  %s\n" % str(meshobj.drot))
	# exportFile.write ("      Size:      %s\n" % str(meshobj.size))
	# exportFile.write ("Delta Size:      %s\n" % str(meshobj.dsize))

	#
#	Print the list of vertex coordinates
#
	exportFile.write (struct.pack('i',(3+3+2)*4))
	exportFile.write (struct.pack('i',len(mesh.verts)))
	index = 0
	for vertex in mesh.verts:
		exportFile.write (struct.pack('f',mesh.verts[index].co.x))
		exportFile.write (struct.pack('f',mesh.verts[index].co.y))
		exportFile.write (struct.pack('f',mesh.verts[index].co.z))
		exportFile.write (struct.pack('f',mesh.verts[index].no.x))
		exportFile.write (struct.pack('f',mesh.verts[index].no.y))
		exportFile.write (struct.pack('f',mesh.verts[index].no.z))
		exportFile.write (struct.pack('f',0.0))
		exportFile.write (struct.pack('f',0.0))
		#exportFile.write (struct.pack('f',mesh.verts[index].uvco.x))
		#exportFile.write (struct.pack('f',mesh.verts[index].uvco.y))
		index = index + 1
#
#	Print the face information.  Start by counting the number of existing
#	faces that are not edges (face[2] == 0), and the number of quads we need
#	to split into triangles giving the total number of triangles we will export.
#
	quadCount = 0
	faceCount = 0
	for face in mesh.faces:
			faceCount = faceCount + 1
			if len(face.verts) == 4:
				quadCount = quadCount + 1
	triangleCount = faceCount + quadCount
	exportFile.write (struct.pack('i',triangleCount))
#
#	Now go back and process the faces we have just counted.
#
	faceCount = 0
	faceIndex = -1
	for face in mesh.faces:
		faceIndex = faceIndex + 1
		exportFile.write (struct.pack('i',face.verts[0].index))
		exportFile.write (struct.pack('i',face.verts[1].index))
		exportFile.write (struct.pack('i',face.verts[2].index))
		if len(face.verts) == 4:
			exportFile.write (struct.pack('i',face.verts[0].index))
			exportFile.write (struct.pack('i',face.verts[2].index))
			exportFile.write (struct.pack('i',face.verts[3].index))
			faceCount = faceCount + 2
		else:						# print triangles as is
			faceCount = faceCount + 1
#
#        Print the material information
#
	# exportFile.write ("materials: (%s)\n" % str(len(mesh.materials)))
	# materialCount = 0
	# for materialName in mesh.materials:
		# material = Blender.Material.Get(mesh.materials[materialCount].name)
		# writeMaterial (exportFile, mesh, material, materialName, materialCount)
		# materialCount = materialCount + 1

	# exportFile.write("Mesh ends.\n\n")
	exportFile.close()


################################################################################
#	Handle a lamp object within the scene
################################################################################
def handleALamp (exportFile, nextObject):
	writeIdentifier (exportFile, nextObject.name, "lamp")
	exportFile.write("Lamp objects are not yet supported\n")
	exportFile.write("Lamp ends.\n\n")


################################################################################
#	Handle a camera object within the scene
################################################################################
def handleACamera (exportFile, nextObject):
	writeIdentifier (exportFile, nextObject.name, "camera")
	exportFile.write("Camera objects are not yet supported\n")
	exportFile.write("Camera ends.\n\n")


################################################################################
#	Exit the script
################################################################################
def exitScript ():
	print "Export finished."
	print "======================================================\n"	# mark end of trace
	Exit()


################################################################################
#	This is the script's main processing function.
#	*  Open the export file we are creating.
#	*  Process empty objects that my be of significance to the export process.
#	*  Create a list of objects to export.
#	*  Process each object.
#	*  Close the export file.
################################################################################
def exportClick ():
	global exportFile, statusText
	statusText = "Running..."			# update GUI status text
	Draw()
	exportFile = openFile(exportFile)		# we just created a new file object
#	writeOutEmpties (exportFile)			# check for special values in empty file names.
#
#	Write out the objects in this scene based on a list of just the selected
#	objects, or of a complete of all the objects in the Blender file.
#
	if (useSelected.val == 1):
		ObjList = Blender.Object.GetSelected()
	else:
		ObjList = Blender.Object.Get()

	selectCount = 0;
	if (len(ObjList) < 1):				# handle an empty list
		print "NO OBJECTS SELECTED."
		selectCount = -1
	else:
		print len(ObjList);
		for nextObject in ObjList:		# otherwise handle each item in the list
			print "Processing object ...";
			data = nextObject.getData()
			if (onlyMeshes.val == 1):
				if (Blender.isMesh(nextObject.name)):
					selectCount = selectCount + 1
					writeMesh (exportFile, nextObject)
			else:
				if (type(data) == Types.NMeshType):
					selectCount = selectCount + 1
					writeMesh (exportFile, nextObject)
				elif (type(data) == Types.LampType):
					selectCount = selectCount + 1
					# handleALamp (exportFile, nextObject)
				elif (type(data) == Types.CameraType):
					selectCount = selectCount + 1
					# handleACamera (exportFile, nextObject)

	if (selectCount == 0):				# note if nothing found
		print "NO OBJECTS SELECTED."
#
#	End the file, close the file, and update the status text.
#
	closeFile(exportFile)
	statusText = "Done."			# update GUI status text
	Draw()

################################################################################
#	end of script
################################################################################