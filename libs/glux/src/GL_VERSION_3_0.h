
// --------------------------------------------------------
// Generated by glux perl script (Fri Feb  7 10:09:03 2020)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#if defined(_WIN32) || defined(_WIN64)
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#if defined(_WIN32) || defined(_WIN64)
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
//#  include "glux_glext_apple.h"
#  include "glux_glext.h"
#else
#ifdef EMSCRIPTEN
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_VERSION_3_0__
#define __GLUX_GL_VERSION_3_0__

GLUX_NEW_PLUGIN(GL_VERSION_3_0)
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#  ifndef GL_COMPARE_REF_TO_TEXTURE
#    define GL_COMPARE_REF_TO_TEXTURE 0x884E
#  endif
#  ifndef GL_CLIP_DISTANCE0
#    define GL_CLIP_DISTANCE0 0x3000
#  endif
#  ifndef GL_CLIP_DISTANCE1
#    define GL_CLIP_DISTANCE1 0x3001
#  endif
#  ifndef GL_CLIP_DISTANCE2
#    define GL_CLIP_DISTANCE2 0x3002
#  endif
#  ifndef GL_CLIP_DISTANCE3
#    define GL_CLIP_DISTANCE3 0x3003
#  endif
#  ifndef GL_CLIP_DISTANCE4
#    define GL_CLIP_DISTANCE4 0x3004
#  endif
#  ifndef GL_CLIP_DISTANCE5
#    define GL_CLIP_DISTANCE5 0x3005
#  endif
#  ifndef GL_CLIP_DISTANCE6
#    define GL_CLIP_DISTANCE6 0x3006
#  endif
#  ifndef GL_CLIP_DISTANCE7
#    define GL_CLIP_DISTANCE7 0x3007
#  endif
#  ifndef GL_MAX_CLIP_DISTANCES
#    define GL_MAX_CLIP_DISTANCES 0x0D32
#  endif
#  ifndef GL_MAJOR_VERSION
#    define GL_MAJOR_VERSION 0x821B
#  endif
#  ifndef GL_MINOR_VERSION
#    define GL_MINOR_VERSION 0x821C
#  endif
#  ifndef GL_NUM_EXTENSIONS
#    define GL_NUM_EXTENSIONS 0x821D
#  endif
#  ifndef GL_CONTEXT_FLAGS
#    define GL_CONTEXT_FLAGS 0x821E
#  endif
#  ifndef GL_COMPRESSED_RED
#    define GL_COMPRESSED_RED 0x8225
#  endif
#  ifndef GL_COMPRESSED_RG
#    define GL_COMPRESSED_RG 0x8226
#  endif
#  ifndef GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#    define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#  endif
#  ifndef GL_RGBA32F
#    define GL_RGBA32F 0x8814
#  endif
#  ifndef GL_RGB32F
#    define GL_RGB32F 0x8815
#  endif
#  ifndef GL_RGBA16F
#    define GL_RGBA16F 0x881A
#  endif
#  ifndef GL_RGB16F
#    define GL_RGB16F 0x881B
#  endif
#  ifndef GL_VERTEX_ATTRIB_ARRAY_INTEGER
#    define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#  endif
#  ifndef GL_MAX_ARRAY_TEXTURE_LAYERS
#    define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#  endif
#  ifndef GL_MIN_PROGRAM_TEXEL_OFFSET
#    define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#  endif
#  ifndef GL_MAX_PROGRAM_TEXEL_OFFSET
#    define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#  endif
#  ifndef GL_CLAMP_READ_COLOR
#    define GL_CLAMP_READ_COLOR 0x891C
#  endif
#  ifndef GL_FIXED_ONLY
#    define GL_FIXED_ONLY 0x891D
#  endif
#  ifndef GL_MAX_VARYING_COMPONENTS
#    define GL_MAX_VARYING_COMPONENTS 0x8B4B
#  endif
#  ifndef GL_TEXTURE_1D_ARRAY
#    define GL_TEXTURE_1D_ARRAY 0x8C18
#  endif
#  ifndef GL_PROXY_TEXTURE_1D_ARRAY
#    define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#  endif
#  ifndef GL_TEXTURE_2D_ARRAY
#    define GL_TEXTURE_2D_ARRAY 0x8C1A
#  endif
#  ifndef GL_PROXY_TEXTURE_2D_ARRAY
#    define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#  endif
#  ifndef GL_TEXTURE_BINDING_1D_ARRAY
#    define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#  endif
#  ifndef GL_TEXTURE_BINDING_2D_ARRAY
#    define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#  endif
#  ifndef GL_R11F_G11F_B10F
#    define GL_R11F_G11F_B10F 0x8C3A
#  endif
#  ifndef GL_UNSIGNED_INT_10F_11F_11F_REV
#    define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#  endif
#  ifndef GL_RGB9_E5
#    define GL_RGB9_E5 0x8C3D
#  endif
#  ifndef GL_UNSIGNED_INT_5_9_9_9_REV
#    define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#  endif
#  ifndef GL_TEXTURE_SHARED_SIZE
#    define GL_TEXTURE_SHARED_SIZE 0x8C3F
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#    define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#    define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#  endif
#  ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#    define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_VARYINGS
#    define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BUFFER_START
#    define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#    define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#  endif
#  ifndef GL_PRIMITIVES_GENERATED
#    define GL_PRIMITIVES_GENERATED 0x8C87
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#    define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#  endif
#  ifndef GL_RASTERIZER_DISCARD
#    define GL_RASTERIZER_DISCARD 0x8C89
#  endif
#  ifndef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#    define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#  endif
#  ifndef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#    define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#  endif
#  ifndef GL_INTERLEAVED_ATTRIBS
#    define GL_INTERLEAVED_ATTRIBS 0x8C8C
#  endif
#  ifndef GL_SEPARATE_ATTRIBS
#    define GL_SEPARATE_ATTRIBS 0x8C8D
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BUFFER
#    define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#    define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#  endif
#  ifndef GL_RGBA32UI
#    define GL_RGBA32UI 0x8D70
#  endif
#  ifndef GL_RGB32UI
#    define GL_RGB32UI 0x8D71
#  endif
#  ifndef GL_RGBA16UI
#    define GL_RGBA16UI 0x8D76
#  endif
#  ifndef GL_RGB16UI
#    define GL_RGB16UI 0x8D77
#  endif
#  ifndef GL_RGBA8UI
#    define GL_RGBA8UI 0x8D7C
#  endif
#  ifndef GL_RGB8UI
#    define GL_RGB8UI 0x8D7D
#  endif
#  ifndef GL_RGBA32I
#    define GL_RGBA32I 0x8D82
#  endif
#  ifndef GL_RGB32I
#    define GL_RGB32I 0x8D83
#  endif
#  ifndef GL_RGBA16I
#    define GL_RGBA16I 0x8D88
#  endif
#  ifndef GL_RGB16I
#    define GL_RGB16I 0x8D89
#  endif
#  ifndef GL_RGBA8I
#    define GL_RGBA8I 0x8D8E
#  endif
#  ifndef GL_RGB8I
#    define GL_RGB8I 0x8D8F
#  endif
#  ifndef GL_RED_INTEGER
#    define GL_RED_INTEGER 0x8D94
#  endif
#  ifndef GL_GREEN_INTEGER
#    define GL_GREEN_INTEGER 0x8D95
#  endif
#  ifndef GL_BLUE_INTEGER
#    define GL_BLUE_INTEGER 0x8D96
#  endif
#  ifndef GL_RGB_INTEGER
#    define GL_RGB_INTEGER 0x8D98
#  endif
#  ifndef GL_RGBA_INTEGER
#    define GL_RGBA_INTEGER 0x8D99
#  endif
#  ifndef GL_BGR_INTEGER
#    define GL_BGR_INTEGER 0x8D9A
#  endif
#  ifndef GL_BGRA_INTEGER
#    define GL_BGRA_INTEGER 0x8D9B
#  endif
#  ifndef GL_SAMPLER_1D_ARRAY
#    define GL_SAMPLER_1D_ARRAY 0x8DC0
#  endif
#  ifndef GL_SAMPLER_2D_ARRAY
#    define GL_SAMPLER_2D_ARRAY 0x8DC1
#  endif
#  ifndef GL_SAMPLER_1D_ARRAY_SHADOW
#    define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#  endif
#  ifndef GL_SAMPLER_2D_ARRAY_SHADOW
#    define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#  endif
#  ifndef GL_SAMPLER_CUBE_SHADOW
#    define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#  endif
#  ifndef GL_UNSIGNED_INT_VEC2
#    define GL_UNSIGNED_INT_VEC2 0x8DC6
#  endif
#  ifndef GL_UNSIGNED_INT_VEC3
#    define GL_UNSIGNED_INT_VEC3 0x8DC7
#  endif
#  ifndef GL_UNSIGNED_INT_VEC4
#    define GL_UNSIGNED_INT_VEC4 0x8DC8
#  endif
#  ifndef GL_INT_SAMPLER_1D
#    define GL_INT_SAMPLER_1D 0x8DC9
#  endif
#  ifndef GL_INT_SAMPLER_2D
#    define GL_INT_SAMPLER_2D 0x8DCA
#  endif
#  ifndef GL_INT_SAMPLER_3D
#    define GL_INT_SAMPLER_3D 0x8DCB
#  endif
#  ifndef GL_INT_SAMPLER_CUBE
#    define GL_INT_SAMPLER_CUBE 0x8DCC
#  endif
#  ifndef GL_INT_SAMPLER_1D_ARRAY
#    define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#  endif
#  ifndef GL_INT_SAMPLER_2D_ARRAY
#    define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#  endif
#  ifndef GL_UNSIGNED_INT_SAMPLER_1D
#    define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#  endif
#  ifndef GL_UNSIGNED_INT_SAMPLER_2D
#    define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#  endif
#  ifndef GL_UNSIGNED_INT_SAMPLER_3D
#    define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#  endif
#  ifndef GL_UNSIGNED_INT_SAMPLER_CUBE
#    define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#  endif
#  ifndef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#    define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#  endif
#  ifndef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#    define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#  endif
#  ifndef GL_QUERY_WAIT
#    define GL_QUERY_WAIT 0x8E13
#  endif
#  ifndef GL_QUERY_NO_WAIT
#    define GL_QUERY_NO_WAIT 0x8E14
#  endif
#  ifndef GL_QUERY_BY_REGION_WAIT
#    define GL_QUERY_BY_REGION_WAIT 0x8E15
#  endif
#  ifndef GL_QUERY_BY_REGION_NO_WAIT
#    define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#  endif
#  ifndef GL_BUFFER_ACCESS_FLAGS
#    define GL_BUFFER_ACCESS_FLAGS 0x911F
#  endif
#  ifndef GL_BUFFER_MAP_LENGTH
#    define GL_BUFFER_MAP_LENGTH 0x9120
#  endif
#  ifndef GL_BUFFER_MAP_OFFSET
#    define GL_BUFFER_MAP_OFFSET 0x9121
#  endif
#  ifndef GL_DEPTH_COMPONENT32F
#    define GL_DEPTH_COMPONENT32F 0x8CAC
#  endif
#  ifndef GL_DEPTH32F_STENCIL8
#    define GL_DEPTH32F_STENCIL8 0x8CAD
#  endif
#  ifndef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#    define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#  endif
#  ifndef GL_INVALID_FRAMEBUFFER_OPERATION
#    define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#    define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#    define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#    define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#    define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#    define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#    define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#    define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#    define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#  endif
#  ifndef GL_FRAMEBUFFER_DEFAULT
#    define GL_FRAMEBUFFER_DEFAULT 0x8218
#  endif
#  ifndef GL_FRAMEBUFFER_UNDEFINED
#    define GL_FRAMEBUFFER_UNDEFINED 0x8219
#  endif
#  ifndef GL_DEPTH_STENCIL_ATTACHMENT
#    define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#  endif
#  ifndef GL_MAX_RENDERBUFFER_SIZE
#    define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#  endif
#  ifndef GL_DEPTH_STENCIL
#    define GL_DEPTH_STENCIL 0x84F9
#  endif
#  ifndef GL_UNSIGNED_INT_24_8
#    define GL_UNSIGNED_INT_24_8 0x84FA
#  endif
#  ifndef GL_DEPTH24_STENCIL8
#    define GL_DEPTH24_STENCIL8 0x88F0
#  endif
#  ifndef GL_TEXTURE_STENCIL_SIZE
#    define GL_TEXTURE_STENCIL_SIZE 0x88F1
#  endif
#  ifndef GL_TEXTURE_RED_TYPE
#    define GL_TEXTURE_RED_TYPE 0x8C10
#  endif
#  ifndef GL_TEXTURE_GREEN_TYPE
#    define GL_TEXTURE_GREEN_TYPE 0x8C11
#  endif
#  ifndef GL_TEXTURE_BLUE_TYPE
#    define GL_TEXTURE_BLUE_TYPE 0x8C12
#  endif
#  ifndef GL_TEXTURE_ALPHA_TYPE
#    define GL_TEXTURE_ALPHA_TYPE 0x8C13
#  endif
#  ifndef GL_TEXTURE_DEPTH_TYPE
#    define GL_TEXTURE_DEPTH_TYPE 0x8C16
#  endif
#  ifndef GL_UNSIGNED_NORMALIZED
#    define GL_UNSIGNED_NORMALIZED 0x8C17
#  endif
#  ifndef GL_FRAMEBUFFER_BINDING
#    define GL_FRAMEBUFFER_BINDING 0x8CA6
#  endif
#  ifndef GL_DRAW_FRAMEBUFFER_BINDING
#    define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#  endif
#  ifndef GL_RENDERBUFFER_BINDING
#    define GL_RENDERBUFFER_BINDING 0x8CA7
#  endif
#  ifndef GL_READ_FRAMEBUFFER
#    define GL_READ_FRAMEBUFFER 0x8CA8
#  endif
#  ifndef GL_DRAW_FRAMEBUFFER
#    define GL_DRAW_FRAMEBUFFER 0x8CA9
#  endif
#  ifndef GL_READ_FRAMEBUFFER_BINDING
#    define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#  endif
#  ifndef GL_RENDERBUFFER_SAMPLES
#    define GL_RENDERBUFFER_SAMPLES 0x8CAB
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#    define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#    define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#    define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#    define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#    define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#  endif
#  ifndef GL_FRAMEBUFFER_COMPLETE
#    define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#  endif
#  ifndef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#    define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#  endif
#  ifndef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#    define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#  endif
#  ifndef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#    define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#  endif
#  ifndef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#    define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#  endif
#  ifndef GL_FRAMEBUFFER_UNSUPPORTED
#    define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#  endif
#  ifndef GL_MAX_COLOR_ATTACHMENTS
#    define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#  endif
#  ifndef GL_COLOR_ATTACHMENT0
#    define GL_COLOR_ATTACHMENT0 0x8CE0
#  endif
#  ifndef GL_COLOR_ATTACHMENT1
#    define GL_COLOR_ATTACHMENT1 0x8CE1
#  endif
#  ifndef GL_COLOR_ATTACHMENT2
#    define GL_COLOR_ATTACHMENT2 0x8CE2
#  endif
#  ifndef GL_COLOR_ATTACHMENT3
#    define GL_COLOR_ATTACHMENT3 0x8CE3
#  endif
#  ifndef GL_COLOR_ATTACHMENT4
#    define GL_COLOR_ATTACHMENT4 0x8CE4
#  endif
#  ifndef GL_COLOR_ATTACHMENT5
#    define GL_COLOR_ATTACHMENT5 0x8CE5
#  endif
#  ifndef GL_COLOR_ATTACHMENT6
#    define GL_COLOR_ATTACHMENT6 0x8CE6
#  endif
#  ifndef GL_COLOR_ATTACHMENT7
#    define GL_COLOR_ATTACHMENT7 0x8CE7
#  endif
#  ifndef GL_COLOR_ATTACHMENT8
#    define GL_COLOR_ATTACHMENT8 0x8CE8
#  endif
#  ifndef GL_COLOR_ATTACHMENT9
#    define GL_COLOR_ATTACHMENT9 0x8CE9
#  endif
#  ifndef GL_COLOR_ATTACHMENT10
#    define GL_COLOR_ATTACHMENT10 0x8CEA
#  endif
#  ifndef GL_COLOR_ATTACHMENT11
#    define GL_COLOR_ATTACHMENT11 0x8CEB
#  endif
#  ifndef GL_COLOR_ATTACHMENT12
#    define GL_COLOR_ATTACHMENT12 0x8CEC
#  endif
#  ifndef GL_COLOR_ATTACHMENT13
#    define GL_COLOR_ATTACHMENT13 0x8CED
#  endif
#  ifndef GL_COLOR_ATTACHMENT14
#    define GL_COLOR_ATTACHMENT14 0x8CEE
#  endif
#  ifndef GL_COLOR_ATTACHMENT15
#    define GL_COLOR_ATTACHMENT15 0x8CEF
#  endif
#  ifndef GL_COLOR_ATTACHMENT16
#    define GL_COLOR_ATTACHMENT16 0x8CF0
#  endif
#  ifndef GL_COLOR_ATTACHMENT17
#    define GL_COLOR_ATTACHMENT17 0x8CF1
#  endif
#  ifndef GL_COLOR_ATTACHMENT18
#    define GL_COLOR_ATTACHMENT18 0x8CF2
#  endif
#  ifndef GL_COLOR_ATTACHMENT19
#    define GL_COLOR_ATTACHMENT19 0x8CF3
#  endif
#  ifndef GL_COLOR_ATTACHMENT20
#    define GL_COLOR_ATTACHMENT20 0x8CF4
#  endif
#  ifndef GL_COLOR_ATTACHMENT21
#    define GL_COLOR_ATTACHMENT21 0x8CF5
#  endif
#  ifndef GL_COLOR_ATTACHMENT22
#    define GL_COLOR_ATTACHMENT22 0x8CF6
#  endif
#  ifndef GL_COLOR_ATTACHMENT23
#    define GL_COLOR_ATTACHMENT23 0x8CF7
#  endif
#  ifndef GL_COLOR_ATTACHMENT24
#    define GL_COLOR_ATTACHMENT24 0x8CF8
#  endif
#  ifndef GL_COLOR_ATTACHMENT25
#    define GL_COLOR_ATTACHMENT25 0x8CF9
#  endif
#  ifndef GL_COLOR_ATTACHMENT26
#    define GL_COLOR_ATTACHMENT26 0x8CFA
#  endif
#  ifndef GL_COLOR_ATTACHMENT27
#    define GL_COLOR_ATTACHMENT27 0x8CFB
#  endif
#  ifndef GL_COLOR_ATTACHMENT28
#    define GL_COLOR_ATTACHMENT28 0x8CFC
#  endif
#  ifndef GL_COLOR_ATTACHMENT29
#    define GL_COLOR_ATTACHMENT29 0x8CFD
#  endif
#  ifndef GL_COLOR_ATTACHMENT30
#    define GL_COLOR_ATTACHMENT30 0x8CFE
#  endif
#  ifndef GL_COLOR_ATTACHMENT31
#    define GL_COLOR_ATTACHMENT31 0x8CFF
#  endif
#  ifndef GL_DEPTH_ATTACHMENT
#    define GL_DEPTH_ATTACHMENT 0x8D00
#  endif
#  ifndef GL_STENCIL_ATTACHMENT
#    define GL_STENCIL_ATTACHMENT 0x8D20
#  endif
#  ifndef GL_FRAMEBUFFER
#    define GL_FRAMEBUFFER 0x8D40
#  endif
#  ifndef GL_RENDERBUFFER
#    define GL_RENDERBUFFER 0x8D41
#  endif
#  ifndef GL_RENDERBUFFER_WIDTH
#    define GL_RENDERBUFFER_WIDTH 0x8D42
#  endif
#  ifndef GL_RENDERBUFFER_HEIGHT
#    define GL_RENDERBUFFER_HEIGHT 0x8D43
#  endif
#  ifndef GL_RENDERBUFFER_INTERNAL_FORMAT
#    define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#  endif
#  ifndef GL_STENCIL_INDEX1
#    define GL_STENCIL_INDEX1 0x8D46
#  endif
#  ifndef GL_STENCIL_INDEX4
#    define GL_STENCIL_INDEX4 0x8D47
#  endif
#  ifndef GL_STENCIL_INDEX8
#    define GL_STENCIL_INDEX8 0x8D48
#  endif
#  ifndef GL_STENCIL_INDEX16
#    define GL_STENCIL_INDEX16 0x8D49
#  endif
#  ifndef GL_RENDERBUFFER_RED_SIZE
#    define GL_RENDERBUFFER_RED_SIZE 0x8D50
#  endif
#  ifndef GL_RENDERBUFFER_GREEN_SIZE
#    define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#  endif
#  ifndef GL_RENDERBUFFER_BLUE_SIZE
#    define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#  endif
#  ifndef GL_RENDERBUFFER_ALPHA_SIZE
#    define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#  endif
#  ifndef GL_RENDERBUFFER_DEPTH_SIZE
#    define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#  endif
#  ifndef GL_RENDERBUFFER_STENCIL_SIZE
#    define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#  endif
#  ifndef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#    define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#  endif
#  ifndef GL_MAX_SAMPLES
#    define GL_MAX_SAMPLES 0x8D57
#  endif
#  ifndef GL_INDEX
#    define GL_INDEX 0x8222
#  endif
#  ifndef GL_TEXTURE_LUMINANCE_TYPE
#    define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#  endif
#  ifndef GL_TEXTURE_INTENSITY_TYPE
#    define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#  endif
#  ifndef GL_FRAMEBUFFER_SRGB
#    define GL_FRAMEBUFFER_SRGB 0x8DB9
#  endif
#  ifndef GL_HALF_FLOAT
#    define GL_HALF_FLOAT 0x140B
#  endif
#  ifndef GL_MAP_READ_BIT
#    define GL_MAP_READ_BIT 0x0001
#  endif
#  ifndef GL_MAP_WRITE_BIT
#    define GL_MAP_WRITE_BIT 0x0002
#  endif
#  ifndef GL_MAP_INVALIDATE_RANGE_BIT
#    define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#  endif
#  ifndef GL_MAP_INVALIDATE_BUFFER_BIT
#    define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#  endif
#  ifndef GL_MAP_FLUSH_EXPLICIT_BIT
#    define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#  endif
#  ifndef GL_MAP_UNSYNCHRONIZED_BIT
#    define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#  endif
#  ifndef GL_COMPRESSED_RED_RGTC1
#    define GL_COMPRESSED_RED_RGTC1 0x8DBB
#  endif
#  ifndef GL_COMPRESSED_SIGNED_RED_RGTC1
#    define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#  endif
#  ifndef GL_COMPRESSED_RG_RGTC2
#    define GL_COMPRESSED_RG_RGTC2 0x8DBD
#  endif
#  ifndef GL_COMPRESSED_SIGNED_RG_RGTC2
#    define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#  endif
#  ifndef GL_RG
#    define GL_RG 0x8227
#  endif
#  ifndef GL_RG_INTEGER
#    define GL_RG_INTEGER 0x8228
#  endif
#  ifndef GL_R8
#    define GL_R8 0x8229
#  endif
#  ifndef GL_R16
#    define GL_R16 0x822A
#  endif
#  ifndef GL_RG8
#    define GL_RG8 0x822B
#  endif
#  ifndef GL_RG16
#    define GL_RG16 0x822C
#  endif
#  ifndef GL_R16F
#    define GL_R16F 0x822D
#  endif
#  ifndef GL_R32F
#    define GL_R32F 0x822E
#  endif
#  ifndef GL_RG16F
#    define GL_RG16F 0x822F
#  endif
#  ifndef GL_RG32F
#    define GL_RG32F 0x8230
#  endif
#  ifndef GL_R8I
#    define GL_R8I 0x8231
#  endif
#  ifndef GL_R8UI
#    define GL_R8UI 0x8232
#  endif
#  ifndef GL_R16I
#    define GL_R16I 0x8233
#  endif
#  ifndef GL_R16UI
#    define GL_R16UI 0x8234
#  endif
#  ifndef GL_R32I
#    define GL_R32I 0x8235
#  endif
#  ifndef GL_R32UI
#    define GL_R32UI 0x8236
#  endif
#  ifndef GL_RG8I
#    define GL_RG8I 0x8237
#  endif
#  ifndef GL_RG8UI
#    define GL_RG8UI 0x8238
#  endif
#  ifndef GL_RG16I
#    define GL_RG16I 0x8239
#  endif
#  ifndef GL_RG16UI
#    define GL_RG16UI 0x823A
#  endif
#  ifndef GL_RG32I
#    define GL_RG32I 0x823B
#  endif
#  ifndef GL_RG32UI
#    define GL_RG32UI 0x823C
#  endif
#  ifndef GL_VERTEX_ARRAY_BINDING
#    define GL_VERTEX_ARRAY_BINDING 0x85B5
#  endif
#  ifndef GL_CLAMP_VERTEX_COLOR
#    define GL_CLAMP_VERTEX_COLOR 0x891A
#  endif
#  ifndef GL_CLAMP_FRAGMENT_COLOR
#    define GL_CLAMP_FRAGMENT_COLOR 0x891B
#  endif
#  ifndef GL_ALPHA_INTEGER
#    define GL_ALPHA_INTEGER 0x8D97
#  endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glColorMaski
typedef void (APIENTRYP PFNGLUXCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
#endif
#ifndef __GLUX__GLFCT_glGetBooleani_v
typedef void (APIENTRYP PFNGLUXGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);
#endif
#ifndef __GLUX__GLFCT_glGetIntegeri_v
typedef void (APIENTRYP PFNGLUXGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);
#endif
#ifndef __GLUX__GLFCT_glEnablei
typedef void (APIENTRYP PFNGLUXENABLEIPROC) (GLenum target, GLuint index);
#endif
#ifndef __GLUX__GLFCT_glDisablei
typedef void (APIENTRYP PFNGLUXDISABLEIPROC) (GLenum target, GLuint index);
#endif
#ifndef __GLUX__GLFCT_glIsEnabledi
typedef GLboolean (APIENTRYP PFNGLUXISENABLEDIPROC) (GLenum target, GLuint index);
#endif
#ifndef __GLUX__GLFCT_glBeginTransformFeedback
typedef void (APIENTRYP PFNGLUXBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);
#endif
#ifndef __GLUX__GLFCT_glEndTransformFeedback
typedef void (APIENTRYP PFNGLUXENDTRANSFORMFEEDBACKPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glBindBufferRange
typedef void (APIENTRYP PFNGLUXBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
#endif
#ifndef __GLUX__GLFCT_glBindBufferBase
typedef void (APIENTRYP PFNGLUXBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);
#endif
#ifndef __GLUX__GLFCT_glTransformFeedbackVaryings
typedef void (APIENTRYP PFNGLUXTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
#endif
#ifndef __GLUX__GLFCT_glGetTransformFeedbackVarying
typedef void (APIENTRYP PFNGLUXGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glClampColor
typedef void (APIENTRYP PFNGLUXCLAMPCOLORPROC) (GLenum target, GLenum clamp);
#endif
#ifndef __GLUX__GLFCT_glBeginConditionalRender
typedef void (APIENTRYP PFNGLUXBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);
#endif
#ifndef __GLUX__GLFCT_glEndConditionalRender
typedef void (APIENTRYP PFNGLUXENDCONDITIONALRENDERPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribIPointer
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
#endif
#ifndef __GLUX__GLFCT_glGetVertexAttribIiv
typedef void (APIENTRYP PFNGLUXGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetVertexAttribIuiv
typedef void (APIENTRYP PFNGLUXGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI1i
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI1IPROC) (GLuint index, GLint x);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI2i
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI3i
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4i
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI1ui
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI2ui
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI3ui
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4ui
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI1iv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI2iv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI3iv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4iv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI1uiv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI2uiv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI3uiv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4uiv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4bv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4sv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4ubv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4usv
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);
#endif
#ifndef __GLUX__GLFCT_glGetUniformuiv
typedef void (APIENTRYP PFNGLUXGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);
#endif
#ifndef __GLUX__GLFCT_glBindFragDataLocation
typedef void (APIENTRYP PFNGLUXBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glGetFragDataLocation
typedef GLint (APIENTRYP PFNGLUXGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glUniform1ui
typedef void (APIENTRYP PFNGLUXUNIFORM1UIPROC) (GLint location, GLuint v0);
#endif
#ifndef __GLUX__GLFCT_glUniform2ui
typedef void (APIENTRYP PFNGLUXUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);
#endif
#ifndef __GLUX__GLFCT_glUniform3ui
typedef void (APIENTRYP PFNGLUXUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
#endif
#ifndef __GLUX__GLFCT_glUniform4ui
typedef void (APIENTRYP PFNGLUXUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
#endif
#ifndef __GLUX__GLFCT_glUniform1uiv
typedef void (APIENTRYP PFNGLUXUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);
#endif
#ifndef __GLUX__GLFCT_glUniform2uiv
typedef void (APIENTRYP PFNGLUXUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);
#endif
#ifndef __GLUX__GLFCT_glUniform3uiv
typedef void (APIENTRYP PFNGLUXUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);
#endif
#ifndef __GLUX__GLFCT_glUniform4uiv
typedef void (APIENTRYP PFNGLUXUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);
#endif
#ifndef __GLUX__GLFCT_glTexParameterIiv
typedef void (APIENTRYP PFNGLUXTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);
#endif
#ifndef __GLUX__GLFCT_glTexParameterIuiv
typedef void (APIENTRYP PFNGLUXTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);
#endif
#ifndef __GLUX__GLFCT_glGetTexParameterIiv
typedef void (APIENTRYP PFNGLUXGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetTexParameterIuiv
typedef void (APIENTRYP PFNGLUXGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);
#endif
#ifndef __GLUX__GLFCT_glClearBufferiv
typedef void (APIENTRYP PFNGLUXCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glClearBufferuiv
typedef void (APIENTRYP PFNGLUXCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);
#endif
#ifndef __GLUX__GLFCT_glClearBufferfv
typedef void (APIENTRYP PFNGLUXCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glClearBufferfi
typedef void (APIENTRYP PFNGLUXCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
#endif
#ifndef __GLUX__GLFCT_glGetStringi
typedef const GLubyte *(APIENTRYP PFNGLUXGETSTRINGIPROC) (GLenum name, GLuint index);
#endif
#ifndef __GLUX__GLFCT_glIsRenderbuffer
typedef GLboolean (APIENTRYP PFNGLUXISRENDERBUFFERPROC) (GLuint renderbuffer);
#endif
#ifndef __GLUX__GLFCT_glBindRenderbuffer
typedef void (APIENTRYP PFNGLUXBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);
#endif
#ifndef __GLUX__GLFCT_glDeleteRenderbuffers
typedef void (APIENTRYP PFNGLUXDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);
#endif
#ifndef __GLUX__GLFCT_glGenRenderbuffers
typedef void (APIENTRYP PFNGLUXGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
#endif
#ifndef __GLUX__GLFCT_glRenderbufferStorage
typedef void (APIENTRYP PFNGLUXRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
#endif
#ifndef __GLUX__GLFCT_glGetRenderbufferParameteriv
typedef void (APIENTRYP PFNGLUXGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glIsFramebuffer
typedef GLboolean (APIENTRYP PFNGLUXISFRAMEBUFFERPROC) (GLuint framebuffer);
#endif
#ifndef __GLUX__GLFCT_glBindFramebuffer
typedef void (APIENTRYP PFNGLUXBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);
#endif
#ifndef __GLUX__GLFCT_glDeleteFramebuffers
typedef void (APIENTRYP PFNGLUXDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);
#endif
#ifndef __GLUX__GLFCT_glGenFramebuffers
typedef void (APIENTRYP PFNGLUXGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);
#endif
#ifndef __GLUX__GLFCT_glCheckFramebufferStatus
typedef GLenum (APIENTRYP PFNGLUXCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);
#endif
#ifndef __GLUX__GLFCT_glFramebufferTexture1D
typedef void (APIENTRYP PFNGLUXFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
#endif
#ifndef __GLUX__GLFCT_glFramebufferTexture2D
typedef void (APIENTRYP PFNGLUXFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
#endif
#ifndef __GLUX__GLFCT_glFramebufferTexture3D
typedef void (APIENTRYP PFNGLUXFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
#endif
#ifndef __GLUX__GLFCT_glFramebufferRenderbuffer
typedef void (APIENTRYP PFNGLUXFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
#endif
#ifndef __GLUX__GLFCT_glGetFramebufferAttachmentParameteriv
typedef void (APIENTRYP PFNGLUXGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGenerateMipmap
typedef void (APIENTRYP PFNGLUXGENERATEMIPMAPPROC) (GLenum target);
#endif
#ifndef __GLUX__GLFCT_glBlitFramebuffer
typedef void (APIENTRYP PFNGLUXBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#endif
#ifndef __GLUX__GLFCT_glRenderbufferStorageMultisample
typedef void (APIENTRYP PFNGLUXRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
#endif
#ifndef __GLUX__GLFCT_glFramebufferTextureLayer
typedef void (APIENTRYP PFNGLUXFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
#endif
#ifndef __GLUX__GLFCT_glMapBufferRange
typedef void *(APIENTRYP PFNGLUXMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
#endif
#ifndef __GLUX__GLFCT_glFlushMappedBufferRange
typedef void (APIENTRYP PFNGLUXFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);
#endif
#ifndef __GLUX__GLFCT_glBindVertexArray
typedef void (APIENTRYP PFNGLUXBINDVERTEXARRAYPROC) (GLuint array);
#endif
#ifndef __GLUX__GLFCT_glDeleteVertexArrays
typedef void (APIENTRYP PFNGLUXDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);
#endif
#ifndef __GLUX__GLFCT_glGenVertexArrays
typedef void (APIENTRYP PFNGLUXGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
#endif
#ifndef __GLUX__GLFCT_glIsVertexArray
typedef GLboolean (APIENTRYP PFNGLUXISVERTEXARRAYPROC) (GLuint array);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glColorMaski
extern PFNGLUXCOLORMASKIPROC glColorMaski;
#endif
#ifndef __GLUX__GLFCT_glGetBooleani_v
extern PFNGLUXGETBOOLEANI_VPROC glGetBooleani_v;
#endif
#ifndef __GLUX__GLFCT_glGetIntegeri_v
extern PFNGLUXGETINTEGERI_VPROC glGetIntegeri_v;
#endif
#ifndef __GLUX__GLFCT_glEnablei
extern PFNGLUXENABLEIPROC glEnablei;
#endif
#ifndef __GLUX__GLFCT_glDisablei
extern PFNGLUXDISABLEIPROC glDisablei;
#endif
#ifndef __GLUX__GLFCT_glIsEnabledi
extern PFNGLUXISENABLEDIPROC glIsEnabledi;
#endif
#ifndef __GLUX__GLFCT_glBeginTransformFeedback
extern PFNGLUXBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
#endif
#ifndef __GLUX__GLFCT_glEndTransformFeedback
extern PFNGLUXENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
#endif
#ifndef __GLUX__GLFCT_glBindBufferRange
extern PFNGLUXBINDBUFFERRANGEPROC glBindBufferRange;
#endif
#ifndef __GLUX__GLFCT_glBindBufferBase
extern PFNGLUXBINDBUFFERBASEPROC glBindBufferBase;
#endif
#ifndef __GLUX__GLFCT_glTransformFeedbackVaryings
extern PFNGLUXTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
#endif
#ifndef __GLUX__GLFCT_glGetTransformFeedbackVarying
extern PFNGLUXGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
#endif
#ifndef __GLUX__GLFCT_glClampColor
extern PFNGLUXCLAMPCOLORPROC glClampColor;
#endif
#ifndef __GLUX__GLFCT_glBeginConditionalRender
extern PFNGLUXBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
#endif
#ifndef __GLUX__GLFCT_glEndConditionalRender
extern PFNGLUXENDCONDITIONALRENDERPROC glEndConditionalRender;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribIPointer
extern PFNGLUXVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
#endif
#ifndef __GLUX__GLFCT_glGetVertexAttribIiv
extern PFNGLUXGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
#endif
#ifndef __GLUX__GLFCT_glGetVertexAttribIuiv
extern PFNGLUXGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI1i
extern PFNGLUXVERTEXATTRIBI1IPROC glVertexAttribI1i;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI2i
extern PFNGLUXVERTEXATTRIBI2IPROC glVertexAttribI2i;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI3i
extern PFNGLUXVERTEXATTRIBI3IPROC glVertexAttribI3i;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4i
extern PFNGLUXVERTEXATTRIBI4IPROC glVertexAttribI4i;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI1ui
extern PFNGLUXVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI2ui
extern PFNGLUXVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI3ui
extern PFNGLUXVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4ui
extern PFNGLUXVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI1iv
extern PFNGLUXVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI2iv
extern PFNGLUXVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI3iv
extern PFNGLUXVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4iv
extern PFNGLUXVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI1uiv
extern PFNGLUXVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI2uiv
extern PFNGLUXVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI3uiv
extern PFNGLUXVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4uiv
extern PFNGLUXVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4bv
extern PFNGLUXVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4sv
extern PFNGLUXVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4ubv
extern PFNGLUXVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribI4usv
extern PFNGLUXVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
#endif
#ifndef __GLUX__GLFCT_glGetUniformuiv
extern PFNGLUXGETUNIFORMUIVPROC glGetUniformuiv;
#endif
#ifndef __GLUX__GLFCT_glBindFragDataLocation
extern PFNGLUXBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
#endif
#ifndef __GLUX__GLFCT_glGetFragDataLocation
extern PFNGLUXGETFRAGDATALOCATIONPROC glGetFragDataLocation;
#endif
#ifndef __GLUX__GLFCT_glUniform1ui
extern PFNGLUXUNIFORM1UIPROC glUniform1ui;
#endif
#ifndef __GLUX__GLFCT_glUniform2ui
extern PFNGLUXUNIFORM2UIPROC glUniform2ui;
#endif
#ifndef __GLUX__GLFCT_glUniform3ui
extern PFNGLUXUNIFORM3UIPROC glUniform3ui;
#endif
#ifndef __GLUX__GLFCT_glUniform4ui
extern PFNGLUXUNIFORM4UIPROC glUniform4ui;
#endif
#ifndef __GLUX__GLFCT_glUniform1uiv
extern PFNGLUXUNIFORM1UIVPROC glUniform1uiv;
#endif
#ifndef __GLUX__GLFCT_glUniform2uiv
extern PFNGLUXUNIFORM2UIVPROC glUniform2uiv;
#endif
#ifndef __GLUX__GLFCT_glUniform3uiv
extern PFNGLUXUNIFORM3UIVPROC glUniform3uiv;
#endif
#ifndef __GLUX__GLFCT_glUniform4uiv
extern PFNGLUXUNIFORM4UIVPROC glUniform4uiv;
#endif
#ifndef __GLUX__GLFCT_glTexParameterIiv
extern PFNGLUXTEXPARAMETERIIVPROC glTexParameterIiv;
#endif
#ifndef __GLUX__GLFCT_glTexParameterIuiv
extern PFNGLUXTEXPARAMETERIUIVPROC glTexParameterIuiv;
#endif
#ifndef __GLUX__GLFCT_glGetTexParameterIiv
extern PFNGLUXGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
#endif
#ifndef __GLUX__GLFCT_glGetTexParameterIuiv
extern PFNGLUXGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
#endif
#ifndef __GLUX__GLFCT_glClearBufferiv
extern PFNGLUXCLEARBUFFERIVPROC glClearBufferiv;
#endif
#ifndef __GLUX__GLFCT_glClearBufferuiv
extern PFNGLUXCLEARBUFFERUIVPROC glClearBufferuiv;
#endif
#ifndef __GLUX__GLFCT_glClearBufferfv
extern PFNGLUXCLEARBUFFERFVPROC glClearBufferfv;
#endif
#ifndef __GLUX__GLFCT_glClearBufferfi
extern PFNGLUXCLEARBUFFERFIPROC glClearBufferfi;
#endif
#ifndef __GLUX__GLFCT_glGetStringi
extern PFNGLUXGETSTRINGIPROC glGetStringi;
#endif
#ifndef __GLUX__GLFCT_glIsRenderbuffer
extern PFNGLUXISRENDERBUFFERPROC glIsRenderbuffer;
#endif
#ifndef __GLUX__GLFCT_glBindRenderbuffer
extern PFNGLUXBINDRENDERBUFFERPROC glBindRenderbuffer;
#endif
#ifndef __GLUX__GLFCT_glDeleteRenderbuffers
extern PFNGLUXDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
#endif
#ifndef __GLUX__GLFCT_glGenRenderbuffers
extern PFNGLUXGENRENDERBUFFERSPROC glGenRenderbuffers;
#endif
#ifndef __GLUX__GLFCT_glRenderbufferStorage
extern PFNGLUXRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
#endif
#ifndef __GLUX__GLFCT_glGetRenderbufferParameteriv
extern PFNGLUXGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
#endif
#ifndef __GLUX__GLFCT_glIsFramebuffer
extern PFNGLUXISFRAMEBUFFERPROC glIsFramebuffer;
#endif
#ifndef __GLUX__GLFCT_glBindFramebuffer
extern PFNGLUXBINDFRAMEBUFFERPROC glBindFramebuffer;
#endif
#ifndef __GLUX__GLFCT_glDeleteFramebuffers
extern PFNGLUXDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
#endif
#ifndef __GLUX__GLFCT_glGenFramebuffers
extern PFNGLUXGENFRAMEBUFFERSPROC glGenFramebuffers;
#endif
#ifndef __GLUX__GLFCT_glCheckFramebufferStatus
extern PFNGLUXCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
#endif
#ifndef __GLUX__GLFCT_glFramebufferTexture1D
extern PFNGLUXFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
#endif
#ifndef __GLUX__GLFCT_glFramebufferTexture2D
extern PFNGLUXFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
#endif
#ifndef __GLUX__GLFCT_glFramebufferTexture3D
extern PFNGLUXFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
#endif
#ifndef __GLUX__GLFCT_glFramebufferRenderbuffer
extern PFNGLUXFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
#endif
#ifndef __GLUX__GLFCT_glGetFramebufferAttachmentParameteriv
extern PFNGLUXGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
#endif
#ifndef __GLUX__GLFCT_glGenerateMipmap
extern PFNGLUXGENERATEMIPMAPPROC glGenerateMipmap;
#endif
#ifndef __GLUX__GLFCT_glBlitFramebuffer
extern PFNGLUXBLITFRAMEBUFFERPROC glBlitFramebuffer;
#endif
#ifndef __GLUX__GLFCT_glRenderbufferStorageMultisample
extern PFNGLUXRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
#endif
#ifndef __GLUX__GLFCT_glFramebufferTextureLayer
extern PFNGLUXFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
#endif
#ifndef __GLUX__GLFCT_glMapBufferRange
extern PFNGLUXMAPBUFFERRANGEPROC glMapBufferRange;
#endif
#ifndef __GLUX__GLFCT_glFlushMappedBufferRange
extern PFNGLUXFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
#endif
#ifndef __GLUX__GLFCT_glBindVertexArray
extern PFNGLUXBINDVERTEXARRAYPROC glBindVertexArray;
#endif
#ifndef __GLUX__GLFCT_glDeleteVertexArrays
extern PFNGLUXDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
#endif
#ifndef __GLUX__GLFCT_glGenVertexArrays
extern PFNGLUXGENVERTEXARRAYSPROC glGenVertexArrays;
#endif
#ifndef __GLUX__GLFCT_glIsVertexArray
extern PFNGLUXISVERTEXARRAYPROC glIsVertexArray;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
