
// --------------------------------------------------------
// Generated by glux perl script (Fri Feb  7 10:09:04 2020)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#if defined(_WIN32) || defined(_WIN64)
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#if defined(_WIN32) || defined(_WIN64)
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
//#  include "glux_glext_apple.h"
#  include "glux_glext.h"
#else
#ifdef EMSCRIPTEN
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_VERSION_4_2__
#define __GLUX_GL_VERSION_4_2__

GLUX_NEW_PLUGIN(GL_VERSION_4_2)
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#  ifndef GL_COPY_READ_BUFFER_BINDING
#    define GL_COPY_READ_BUFFER_BINDING 0x8F36
#  endif
#  ifndef GL_COPY_WRITE_BUFFER_BINDING
#    define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_ACTIVE
#    define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_PAUSED
#    define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#  endif
#  ifndef GL_UNPACK_COMPRESSED_BLOCK_WIDTH
#    define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#  endif
#  ifndef GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
#    define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#  endif
#  ifndef GL_UNPACK_COMPRESSED_BLOCK_DEPTH
#    define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#  endif
#  ifndef GL_UNPACK_COMPRESSED_BLOCK_SIZE
#    define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#  endif
#  ifndef GL_PACK_COMPRESSED_BLOCK_WIDTH
#    define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#  endif
#  ifndef GL_PACK_COMPRESSED_BLOCK_HEIGHT
#    define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#  endif
#  ifndef GL_PACK_COMPRESSED_BLOCK_DEPTH
#    define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#  endif
#  ifndef GL_PACK_COMPRESSED_BLOCK_SIZE
#    define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#  endif
#  ifndef GL_NUM_SAMPLE_COUNTS
#    define GL_NUM_SAMPLE_COUNTS 0x9380
#  endif
#  ifndef GL_MIN_MAP_BUFFER_ALIGNMENT
#    define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER
#    define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_BINDING
#    define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_START
#    define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_SIZE
#    define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#    define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#    define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#    define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#    define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#    define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#    define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#    define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#    define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#  endif
#  ifndef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#    define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#  endif
#  ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#    define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#  endif
#  ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#    define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#  endif
#  ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#    define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#  endif
#  ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#    define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#  endif
#  ifndef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#    define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#  endif
#  ifndef GL_MAX_VERTEX_ATOMIC_COUNTERS
#    define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#  endif
#  ifndef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#    define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#  endif
#  ifndef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#    define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#  endif
#  ifndef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#    define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#  endif
#  ifndef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#    define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#  endif
#  ifndef GL_MAX_COMBINED_ATOMIC_COUNTERS
#    define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#  endif
#  ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#    define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#  endif
#  ifndef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#    define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#  endif
#  ifndef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#    define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#  endif
#  ifndef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#    define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#  endif
#  ifndef GL_UNSIGNED_INT_ATOMIC_COUNTER
#    define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#  endif
#  ifndef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#    define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#  endif
#  ifndef GL_ELEMENT_ARRAY_BARRIER_BIT
#    define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#  endif
#  ifndef GL_UNIFORM_BARRIER_BIT
#    define GL_UNIFORM_BARRIER_BIT 0x00000004
#  endif
#  ifndef GL_TEXTURE_FETCH_BARRIER_BIT
#    define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#  endif
#  ifndef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#    define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#  endif
#  ifndef GL_COMMAND_BARRIER_BIT
#    define GL_COMMAND_BARRIER_BIT 0x00000040
#  endif
#  ifndef GL_PIXEL_BUFFER_BARRIER_BIT
#    define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#  endif
#  ifndef GL_TEXTURE_UPDATE_BARRIER_BIT
#    define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#  endif
#  ifndef GL_BUFFER_UPDATE_BARRIER_BIT
#    define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#  endif
#  ifndef GL_FRAMEBUFFER_BARRIER_BIT
#    define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#    define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#  endif
#  ifndef GL_ATOMIC_COUNTER_BARRIER_BIT
#    define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#  endif
#  ifndef GL_ALL_BARRIER_BITS
#    define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#  endif
#  ifndef GL_MAX_IMAGE_UNITS
#    define GL_MAX_IMAGE_UNITS 0x8F38
#  endif
#  ifndef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#    define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#  endif
#  ifndef GL_IMAGE_BINDING_NAME
#    define GL_IMAGE_BINDING_NAME 0x8F3A
#  endif
#  ifndef GL_IMAGE_BINDING_LEVEL
#    define GL_IMAGE_BINDING_LEVEL 0x8F3B
#  endif
#  ifndef GL_IMAGE_BINDING_LAYERED
#    define GL_IMAGE_BINDING_LAYERED 0x8F3C
#  endif
#  ifndef GL_IMAGE_BINDING_LAYER
#    define GL_IMAGE_BINDING_LAYER 0x8F3D
#  endif
#  ifndef GL_IMAGE_BINDING_ACCESS
#    define GL_IMAGE_BINDING_ACCESS 0x8F3E
#  endif
#  ifndef GL_IMAGE_1D
#    define GL_IMAGE_1D 0x904C
#  endif
#  ifndef GL_IMAGE_2D
#    define GL_IMAGE_2D 0x904D
#  endif
#  ifndef GL_IMAGE_3D
#    define GL_IMAGE_3D 0x904E
#  endif
#  ifndef GL_IMAGE_2D_RECT
#    define GL_IMAGE_2D_RECT 0x904F
#  endif
#  ifndef GL_IMAGE_CUBE
#    define GL_IMAGE_CUBE 0x9050
#  endif
#  ifndef GL_IMAGE_BUFFER
#    define GL_IMAGE_BUFFER 0x9051
#  endif
#  ifndef GL_IMAGE_1D_ARRAY
#    define GL_IMAGE_1D_ARRAY 0x9052
#  endif
#  ifndef GL_IMAGE_2D_ARRAY
#    define GL_IMAGE_2D_ARRAY 0x9053
#  endif
#  ifndef GL_IMAGE_CUBE_MAP_ARRAY
#    define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#  endif
#  ifndef GL_IMAGE_2D_MULTISAMPLE
#    define GL_IMAGE_2D_MULTISAMPLE 0x9055
#  endif
#  ifndef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#    define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#  endif
#  ifndef GL_INT_IMAGE_1D
#    define GL_INT_IMAGE_1D 0x9057
#  endif
#  ifndef GL_INT_IMAGE_2D
#    define GL_INT_IMAGE_2D 0x9058
#  endif
#  ifndef GL_INT_IMAGE_3D
#    define GL_INT_IMAGE_3D 0x9059
#  endif
#  ifndef GL_INT_IMAGE_2D_RECT
#    define GL_INT_IMAGE_2D_RECT 0x905A
#  endif
#  ifndef GL_INT_IMAGE_CUBE
#    define GL_INT_IMAGE_CUBE 0x905B
#  endif
#  ifndef GL_INT_IMAGE_BUFFER
#    define GL_INT_IMAGE_BUFFER 0x905C
#  endif
#  ifndef GL_INT_IMAGE_1D_ARRAY
#    define GL_INT_IMAGE_1D_ARRAY 0x905D
#  endif
#  ifndef GL_INT_IMAGE_2D_ARRAY
#    define GL_INT_IMAGE_2D_ARRAY 0x905E
#  endif
#  ifndef GL_INT_IMAGE_CUBE_MAP_ARRAY
#    define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#  endif
#  ifndef GL_INT_IMAGE_2D_MULTISAMPLE
#    define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#  endif
#  ifndef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#    define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_1D
#    define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_2D
#    define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_3D
#    define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_2D_RECT
#    define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_CUBE
#    define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_BUFFER
#    define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#    define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#    define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#    define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#    define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#  endif
#  ifndef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#    define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#  endif
#  ifndef GL_MAX_IMAGE_SAMPLES
#    define GL_MAX_IMAGE_SAMPLES 0x906D
#  endif
#  ifndef GL_IMAGE_BINDING_FORMAT
#    define GL_IMAGE_BINDING_FORMAT 0x906E
#  endif
#  ifndef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#    define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#  endif
#  ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#    define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#  endif
#  ifndef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#    define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#  endif
#  ifndef GL_MAX_VERTEX_IMAGE_UNIFORMS
#    define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#  endif
#  ifndef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#    define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#  endif
#  ifndef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#    define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#  endif
#  ifndef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#    define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#  endif
#  ifndef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#    define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#  endif
#  ifndef GL_MAX_COMBINED_IMAGE_UNIFORMS
#    define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#  endif
#  ifndef GL_COMPRESSED_RGBA_BPTC_UNORM
#    define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#  endif
#  ifndef GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
#    define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#  endif
#  ifndef GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
#    define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#  endif
#  ifndef GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
#    define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#  endif
#  ifndef GL_TEXTURE_IMMUTABLE_FORMAT
#    define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#  endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDrawArraysInstancedBaseInstance
typedef void (APIENTRYP PFNGLUXDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
#endif
#ifndef __GLUX__GLFCT_glDrawElementsInstancedBaseInstance
typedef void (APIENTRYP PFNGLUXDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
#endif
#ifndef __GLUX__GLFCT_glDrawElementsInstancedBaseVertexBaseInstance
typedef void (APIENTRYP PFNGLUXDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
#endif
#ifndef __GLUX__GLFCT_glGetInternalformativ
typedef void (APIENTRYP PFNGLUXGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
typedef void (APIENTRYP PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glBindImageTexture
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
typedef void (APIENTRYP PFNGLUXMEMORYBARRIERPROC) (GLbitfield barriers);
#endif
#ifndef __GLUX__GLFCT_glTexStorage1D
typedef void (APIENTRYP PFNGLUXTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
#endif
#ifndef __GLUX__GLFCT_glTexStorage2D
typedef void (APIENTRYP PFNGLUXTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
#endif
#ifndef __GLUX__GLFCT_glTexStorage3D
typedef void (APIENTRYP PFNGLUXTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
#endif
#ifndef __GLUX__GLFCT_glDrawTransformFeedbackInstanced
typedef void (APIENTRYP PFNGLUXDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount);
#endif
#ifndef __GLUX__GLFCT_glDrawTransformFeedbackStreamInstanced
typedef void (APIENTRYP PFNGLUXDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDrawArraysInstancedBaseInstance
extern PFNGLUXDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
#endif
#ifndef __GLUX__GLFCT_glDrawElementsInstancedBaseInstance
extern PFNGLUXDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
#endif
#ifndef __GLUX__GLFCT_glDrawElementsInstancedBaseVertexBaseInstance
extern PFNGLUXDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
#endif
#ifndef __GLUX__GLFCT_glGetInternalformativ
extern PFNGLUXGETINTERNALFORMATIVPROC glGetInternalformativ;
#endif
#ifndef __GLUX__GLFCT_glGetActiveAtomicCounterBufferiv
extern PFNGLUXGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
#endif
#ifndef __GLUX__GLFCT_glBindImageTexture
extern PFNGLUXBINDIMAGETEXTUREPROC glBindImageTexture;
#endif
#ifndef __GLUX__GLFCT_glMemoryBarrier
extern PFNGLUXMEMORYBARRIERPROC glMemoryBarrier;
#endif
#ifndef __GLUX__GLFCT_glTexStorage1D
extern PFNGLUXTEXSTORAGE1DPROC glTexStorage1D;
#endif
#ifndef __GLUX__GLFCT_glTexStorage2D
extern PFNGLUXTEXSTORAGE2DPROC glTexStorage2D;
#endif
#ifndef __GLUX__GLFCT_glTexStorage3D
extern PFNGLUXTEXSTORAGE3DPROC glTexStorage3D;
#endif
#ifndef __GLUX__GLFCT_glDrawTransformFeedbackInstanced
extern PFNGLUXDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
#endif
#ifndef __GLUX__GLFCT_glDrawTransformFeedbackStreamInstanced
extern PFNGLUXDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
