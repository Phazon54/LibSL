
// --------------------------------------------------------
// Generated by glux perl script (Fri Feb  7 10:09:04 2020)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#if defined(_WIN32) || defined(_WIN64)
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#if defined(_WIN32) || defined(_WIN64)
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
//#  include "glux_glext_apple.h"
#  include "glux_glext.h"
#else
#ifdef EMSCRIPTEN
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_VERSION_4_4__
#define __GLUX_GL_VERSION_4_4__

GLUX_NEW_PLUGIN(GL_VERSION_4_4)
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#  ifndef GL_MAX_VERTEX_ATTRIB_STRIDE
#    define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#  endif
#  ifndef GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
#    define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#  endif
#  ifndef GL_TEXTURE_BUFFER_BINDING
#    define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#  endif
#  ifndef GL_MAP_PERSISTENT_BIT
#    define GL_MAP_PERSISTENT_BIT 0x0040
#  endif
#  ifndef GL_MAP_COHERENT_BIT
#    define GL_MAP_COHERENT_BIT 0x0080
#  endif
#  ifndef GL_DYNAMIC_STORAGE_BIT
#    define GL_DYNAMIC_STORAGE_BIT 0x0100
#  endif
#  ifndef GL_CLIENT_STORAGE_BIT
#    define GL_CLIENT_STORAGE_BIT 0x0200
#  endif
#  ifndef GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
#    define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#  endif
#  ifndef GL_BUFFER_IMMUTABLE_STORAGE
#    define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#  endif
#  ifndef GL_BUFFER_STORAGE_FLAGS
#    define GL_BUFFER_STORAGE_FLAGS 0x8220
#  endif
#  ifndef GL_CLEAR_TEXTURE
#    define GL_CLEAR_TEXTURE 0x9365
#  endif
#  ifndef GL_LOCATION_COMPONENT
#    define GL_LOCATION_COMPONENT 0x934A
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
#    define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
#    define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#  endif
#  ifndef GL_QUERY_BUFFER
#    define GL_QUERY_BUFFER 0x9192
#  endif
#  ifndef GL_QUERY_BUFFER_BARRIER_BIT
#    define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#  endif
#  ifndef GL_QUERY_BUFFER_BINDING
#    define GL_QUERY_BUFFER_BINDING 0x9193
#  endif
#  ifndef GL_QUERY_RESULT_NO_WAIT
#    define GL_QUERY_RESULT_NO_WAIT 0x9194
#  endif
#  ifndef GL_MIRROR_CLAMP_TO_EDGE
#    define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#  endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glBufferStorage
typedef void (APIENTRYP PFNGLUXBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
#endif
#ifndef __GLUX__GLFCT_glClearTexImage
typedef void (APIENTRYP PFNGLUXCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
#endif
#ifndef __GLUX__GLFCT_glClearTexSubImage
typedef void (APIENTRYP PFNGLUXCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
#endif
#ifndef __GLUX__GLFCT_glBindBuffersBase
typedef void (APIENTRYP PFNGLUXBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
#endif
#ifndef __GLUX__GLFCT_glBindBuffersRange
typedef void (APIENTRYP PFNGLUXBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
#endif
#ifndef __GLUX__GLFCT_glBindTextures
typedef void (APIENTRYP PFNGLUXBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);
#endif
#ifndef __GLUX__GLFCT_glBindSamplers
typedef void (APIENTRYP PFNGLUXBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint *samplers);
#endif
#ifndef __GLUX__GLFCT_glBindImageTextures
typedef void (APIENTRYP PFNGLUXBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);
#endif
#ifndef __GLUX__GLFCT_glBindVertexBuffers
typedef void (APIENTRYP PFNGLUXBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glBufferStorage
extern PFNGLUXBUFFERSTORAGEPROC glBufferStorage;
#endif
#ifndef __GLUX__GLFCT_glClearTexImage
extern PFNGLUXCLEARTEXIMAGEPROC glClearTexImage;
#endif
#ifndef __GLUX__GLFCT_glClearTexSubImage
extern PFNGLUXCLEARTEXSUBIMAGEPROC glClearTexSubImage;
#endif
#ifndef __GLUX__GLFCT_glBindBuffersBase
extern PFNGLUXBINDBUFFERSBASEPROC glBindBuffersBase;
#endif
#ifndef __GLUX__GLFCT_glBindBuffersRange
extern PFNGLUXBINDBUFFERSRANGEPROC glBindBuffersRange;
#endif
#ifndef __GLUX__GLFCT_glBindTextures
extern PFNGLUXBINDTEXTURESPROC glBindTextures;
#endif
#ifndef __GLUX__GLFCT_glBindSamplers
extern PFNGLUXBINDSAMPLERSPROC glBindSamplers;
#endif
#ifndef __GLUX__GLFCT_glBindImageTextures
extern PFNGLUXBINDIMAGETEXTURESPROC glBindImageTextures;
#endif
#ifndef __GLUX__GLFCT_glBindVertexBuffers
extern PFNGLUXBINDVERTEXBUFFERSPROC glBindVertexBuffers;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
