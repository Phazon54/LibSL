
// --------------------------------------------------------
// Generated by glux perl script (Fri Feb  7 10:09:04 2020)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#if defined(_WIN32) || defined(_WIN64)
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#if defined(_WIN32) || defined(_WIN64)
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
//#  include "glux_glext_apple.h"
#  include "glux_glext.h"
#else
#ifdef EMSCRIPTEN
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_VERSION_4_3__
#define __GLUX_GL_VERSION_4_3__

GLUX_NEW_PLUGIN(GL_VERSION_4_3)
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#  ifndef GL_NUM_SHADING_LANGUAGE_VERSIONS
#    define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#  endif
#  ifndef GL_VERTEX_ATTRIB_ARRAY_LONG
#    define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#  endif
#  ifndef GL_COMPRESSED_RGB8_ETC2
#    define GL_COMPRESSED_RGB8_ETC2 0x9274
#  endif
#  ifndef GL_COMPRESSED_SRGB8_ETC2
#    define GL_COMPRESSED_SRGB8_ETC2 0x9275
#  endif
#  ifndef GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
#    define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#  endif
#  ifndef GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
#    define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#  endif
#  ifndef GL_COMPRESSED_RGBA8_ETC2_EAC
#    define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#  endif
#  ifndef GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
#    define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#  endif
#  ifndef GL_COMPRESSED_R11_EAC
#    define GL_COMPRESSED_R11_EAC 0x9270
#  endif
#  ifndef GL_COMPRESSED_SIGNED_R11_EAC
#    define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#  endif
#  ifndef GL_COMPRESSED_RG11_EAC
#    define GL_COMPRESSED_RG11_EAC 0x9272
#  endif
#  ifndef GL_COMPRESSED_SIGNED_RG11_EAC
#    define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#  endif
#  ifndef GL_PRIMITIVE_RESTART_FIXED_INDEX
#    define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#  endif
#  ifndef GL_ANY_SAMPLES_PASSED_CONSERVATIVE
#    define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#  endif
#  ifndef GL_MAX_ELEMENT_INDEX
#    define GL_MAX_ELEMENT_INDEX 0x8D6B
#  endif
#  ifndef GL_COMPUTE_SHADER
#    define GL_COMPUTE_SHADER 0x91B9
#  endif
#  ifndef GL_MAX_COMPUTE_UNIFORM_BLOCKS
#    define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#  endif
#  ifndef GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
#    define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#  endif
#  ifndef GL_MAX_COMPUTE_IMAGE_UNIFORMS
#    define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#  endif
#  ifndef GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
#    define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#  endif
#  ifndef GL_MAX_COMPUTE_UNIFORM_COMPONENTS
#    define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#  endif
#  ifndef GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
#    define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#  endif
#  ifndef GL_MAX_COMPUTE_ATOMIC_COUNTERS
#    define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#  endif
#  ifndef GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
#    define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#  endif
#  ifndef GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
#    define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#  endif
#  ifndef GL_MAX_COMPUTE_WORK_GROUP_COUNT
#    define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#  endif
#  ifndef GL_MAX_COMPUTE_WORK_GROUP_SIZE
#    define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#  endif
#  ifndef GL_COMPUTE_WORK_GROUP_SIZE
#    define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#  endif
#  ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
#    define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
#    define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#  endif
#  ifndef GL_DISPATCH_INDIRECT_BUFFER
#    define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#  endif
#  ifndef GL_DISPATCH_INDIRECT_BUFFER_BINDING
#    define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#  endif
#  ifndef GL_COMPUTE_SHADER_BIT
#    define GL_COMPUTE_SHADER_BIT 0x00000020
#  endif
#  ifndef GL_DEBUG_OUTPUT_SYNCHRONOUS
#    define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#  endif
#  ifndef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#    define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#  endif
#  ifndef GL_DEBUG_CALLBACK_FUNCTION
#    define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#  endif
#  ifndef GL_DEBUG_CALLBACK_USER_PARAM
#    define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#  endif
#  ifndef GL_DEBUG_SOURCE_API
#    define GL_DEBUG_SOURCE_API 0x8246
#  endif
#  ifndef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#    define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#  endif
#  ifndef GL_DEBUG_SOURCE_SHADER_COMPILER
#    define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#  endif
#  ifndef GL_DEBUG_SOURCE_THIRD_PARTY
#    define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#  endif
#  ifndef GL_DEBUG_SOURCE_APPLICATION
#    define GL_DEBUG_SOURCE_APPLICATION 0x824A
#  endif
#  ifndef GL_DEBUG_SOURCE_OTHER
#    define GL_DEBUG_SOURCE_OTHER 0x824B
#  endif
#  ifndef GL_DEBUG_TYPE_ERROR
#    define GL_DEBUG_TYPE_ERROR 0x824C
#  endif
#  ifndef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#    define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#  endif
#  ifndef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#    define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#  endif
#  ifndef GL_DEBUG_TYPE_PORTABILITY
#    define GL_DEBUG_TYPE_PORTABILITY 0x824F
#  endif
#  ifndef GL_DEBUG_TYPE_PERFORMANCE
#    define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#  endif
#  ifndef GL_DEBUG_TYPE_OTHER
#    define GL_DEBUG_TYPE_OTHER 0x8251
#  endif
#  ifndef GL_MAX_DEBUG_MESSAGE_LENGTH
#    define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#  endif
#  ifndef GL_MAX_DEBUG_LOGGED_MESSAGES
#    define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#  endif
#  ifndef GL_DEBUG_LOGGED_MESSAGES
#    define GL_DEBUG_LOGGED_MESSAGES 0x9145
#  endif
#  ifndef GL_DEBUG_SEVERITY_HIGH
#    define GL_DEBUG_SEVERITY_HIGH 0x9146
#  endif
#  ifndef GL_DEBUG_SEVERITY_MEDIUM
#    define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#  endif
#  ifndef GL_DEBUG_SEVERITY_LOW
#    define GL_DEBUG_SEVERITY_LOW 0x9148
#  endif
#  ifndef GL_DEBUG_TYPE_MARKER
#    define GL_DEBUG_TYPE_MARKER 0x8268
#  endif
#  ifndef GL_DEBUG_TYPE_PUSH_GROUP
#    define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#  endif
#  ifndef GL_DEBUG_TYPE_POP_GROUP
#    define GL_DEBUG_TYPE_POP_GROUP 0x826A
#  endif
#  ifndef GL_DEBUG_SEVERITY_NOTIFICATION
#    define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#  endif
#  ifndef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#    define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#  endif
#  ifndef GL_DEBUG_GROUP_STACK_DEPTH
#    define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#  endif
#  ifndef GL_BUFFER
#    define GL_BUFFER 0x82E0
#  endif
#  ifndef GL_SHADER
#    define GL_SHADER 0x82E1
#  endif
#  ifndef GL_PROGRAM
#    define GL_PROGRAM 0x82E2
#  endif
#  ifndef GL_QUERY
#    define GL_QUERY 0x82E3
#  endif
#  ifndef GL_PROGRAM_PIPELINE
#    define GL_PROGRAM_PIPELINE 0x82E4
#  endif
#  ifndef GL_SAMPLER
#    define GL_SAMPLER 0x82E6
#  endif
#  ifndef GL_MAX_LABEL_LENGTH
#    define GL_MAX_LABEL_LENGTH 0x82E8
#  endif
#  ifndef GL_DEBUG_OUTPUT
#    define GL_DEBUG_OUTPUT 0x92E0
#  endif
#  ifndef GL_CONTEXT_FLAG_DEBUG_BIT
#    define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#  endif
#  ifndef GL_MAX_UNIFORM_LOCATIONS
#    define GL_MAX_UNIFORM_LOCATIONS 0x826E
#  endif
#  ifndef GL_FRAMEBUFFER_DEFAULT_WIDTH
#    define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#  endif
#  ifndef GL_FRAMEBUFFER_DEFAULT_HEIGHT
#    define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#  endif
#  ifndef GL_FRAMEBUFFER_DEFAULT_LAYERS
#    define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#  endif
#  ifndef GL_FRAMEBUFFER_DEFAULT_SAMPLES
#    define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#  endif
#  ifndef GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
#    define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#  endif
#  ifndef GL_MAX_FRAMEBUFFER_WIDTH
#    define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#  endif
#  ifndef GL_MAX_FRAMEBUFFER_HEIGHT
#    define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#  endif
#  ifndef GL_MAX_FRAMEBUFFER_LAYERS
#    define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#  endif
#  ifndef GL_MAX_FRAMEBUFFER_SAMPLES
#    define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#  endif
#  ifndef GL_INTERNALFORMAT_SUPPORTED
#    define GL_INTERNALFORMAT_SUPPORTED 0x826F
#  endif
#  ifndef GL_INTERNALFORMAT_PREFERRED
#    define GL_INTERNALFORMAT_PREFERRED 0x8270
#  endif
#  ifndef GL_INTERNALFORMAT_RED_SIZE
#    define GL_INTERNALFORMAT_RED_SIZE 0x8271
#  endif
#  ifndef GL_INTERNALFORMAT_GREEN_SIZE
#    define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#  endif
#  ifndef GL_INTERNALFORMAT_BLUE_SIZE
#    define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#  endif
#  ifndef GL_INTERNALFORMAT_ALPHA_SIZE
#    define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#  endif
#  ifndef GL_INTERNALFORMAT_DEPTH_SIZE
#    define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#  endif
#  ifndef GL_INTERNALFORMAT_STENCIL_SIZE
#    define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#  endif
#  ifndef GL_INTERNALFORMAT_SHARED_SIZE
#    define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#  endif
#  ifndef GL_INTERNALFORMAT_RED_TYPE
#    define GL_INTERNALFORMAT_RED_TYPE 0x8278
#  endif
#  ifndef GL_INTERNALFORMAT_GREEN_TYPE
#    define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#  endif
#  ifndef GL_INTERNALFORMAT_BLUE_TYPE
#    define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#  endif
#  ifndef GL_INTERNALFORMAT_ALPHA_TYPE
#    define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#  endif
#  ifndef GL_INTERNALFORMAT_DEPTH_TYPE
#    define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#  endif
#  ifndef GL_INTERNALFORMAT_STENCIL_TYPE
#    define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#  endif
#  ifndef GL_MAX_WIDTH
#    define GL_MAX_WIDTH 0x827E
#  endif
#  ifndef GL_MAX_HEIGHT
#    define GL_MAX_HEIGHT 0x827F
#  endif
#  ifndef GL_MAX_DEPTH
#    define GL_MAX_DEPTH 0x8280
#  endif
#  ifndef GL_MAX_LAYERS
#    define GL_MAX_LAYERS 0x8281
#  endif
#  ifndef GL_MAX_COMBINED_DIMENSIONS
#    define GL_MAX_COMBINED_DIMENSIONS 0x8282
#  endif
#  ifndef GL_COLOR_COMPONENTS
#    define GL_COLOR_COMPONENTS 0x8283
#  endif
#  ifndef GL_DEPTH_COMPONENTS
#    define GL_DEPTH_COMPONENTS 0x8284
#  endif
#  ifndef GL_STENCIL_COMPONENTS
#    define GL_STENCIL_COMPONENTS 0x8285
#  endif
#  ifndef GL_COLOR_RENDERABLE
#    define GL_COLOR_RENDERABLE 0x8286
#  endif
#  ifndef GL_DEPTH_RENDERABLE
#    define GL_DEPTH_RENDERABLE 0x8287
#  endif
#  ifndef GL_STENCIL_RENDERABLE
#    define GL_STENCIL_RENDERABLE 0x8288
#  endif
#  ifndef GL_FRAMEBUFFER_RENDERABLE
#    define GL_FRAMEBUFFER_RENDERABLE 0x8289
#  endif
#  ifndef GL_FRAMEBUFFER_RENDERABLE_LAYERED
#    define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#  endif
#  ifndef GL_FRAMEBUFFER_BLEND
#    define GL_FRAMEBUFFER_BLEND 0x828B
#  endif
#  ifndef GL_READ_PIXELS
#    define GL_READ_PIXELS 0x828C
#  endif
#  ifndef GL_READ_PIXELS_FORMAT
#    define GL_READ_PIXELS_FORMAT 0x828D
#  endif
#  ifndef GL_READ_PIXELS_TYPE
#    define GL_READ_PIXELS_TYPE 0x828E
#  endif
#  ifndef GL_TEXTURE_IMAGE_FORMAT
#    define GL_TEXTURE_IMAGE_FORMAT 0x828F
#  endif
#  ifndef GL_TEXTURE_IMAGE_TYPE
#    define GL_TEXTURE_IMAGE_TYPE 0x8290
#  endif
#  ifndef GL_GET_TEXTURE_IMAGE_FORMAT
#    define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#  endif
#  ifndef GL_GET_TEXTURE_IMAGE_TYPE
#    define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#  endif
#  ifndef GL_MIPMAP
#    define GL_MIPMAP 0x8293
#  endif
#  ifndef GL_MANUAL_GENERATE_MIPMAP
#    define GL_MANUAL_GENERATE_MIPMAP 0x8294
#  endif
#  ifndef GL_AUTO_GENERATE_MIPMAP
#    define GL_AUTO_GENERATE_MIPMAP 0x8295
#  endif
#  ifndef GL_COLOR_ENCODING
#    define GL_COLOR_ENCODING 0x8296
#  endif
#  ifndef GL_SRGB_READ
#    define GL_SRGB_READ 0x8297
#  endif
#  ifndef GL_SRGB_WRITE
#    define GL_SRGB_WRITE 0x8298
#  endif
#  ifndef GL_FILTER
#    define GL_FILTER 0x829A
#  endif
#  ifndef GL_VERTEX_TEXTURE
#    define GL_VERTEX_TEXTURE 0x829B
#  endif
#  ifndef GL_TESS_CONTROL_TEXTURE
#    define GL_TESS_CONTROL_TEXTURE 0x829C
#  endif
#  ifndef GL_TESS_EVALUATION_TEXTURE
#    define GL_TESS_EVALUATION_TEXTURE 0x829D
#  endif
#  ifndef GL_GEOMETRY_TEXTURE
#    define GL_GEOMETRY_TEXTURE 0x829E
#  endif
#  ifndef GL_FRAGMENT_TEXTURE
#    define GL_FRAGMENT_TEXTURE 0x829F
#  endif
#  ifndef GL_COMPUTE_TEXTURE
#    define GL_COMPUTE_TEXTURE 0x82A0
#  endif
#  ifndef GL_TEXTURE_SHADOW
#    define GL_TEXTURE_SHADOW 0x82A1
#  endif
#  ifndef GL_TEXTURE_GATHER
#    define GL_TEXTURE_GATHER 0x82A2
#  endif
#  ifndef GL_TEXTURE_GATHER_SHADOW
#    define GL_TEXTURE_GATHER_SHADOW 0x82A3
#  endif
#  ifndef GL_SHADER_IMAGE_LOAD
#    define GL_SHADER_IMAGE_LOAD 0x82A4
#  endif
#  ifndef GL_SHADER_IMAGE_STORE
#    define GL_SHADER_IMAGE_STORE 0x82A5
#  endif
#  ifndef GL_SHADER_IMAGE_ATOMIC
#    define GL_SHADER_IMAGE_ATOMIC 0x82A6
#  endif
#  ifndef GL_IMAGE_TEXEL_SIZE
#    define GL_IMAGE_TEXEL_SIZE 0x82A7
#  endif
#  ifndef GL_IMAGE_COMPATIBILITY_CLASS
#    define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#  endif
#  ifndef GL_IMAGE_PIXEL_FORMAT
#    define GL_IMAGE_PIXEL_FORMAT 0x82A9
#  endif
#  ifndef GL_IMAGE_PIXEL_TYPE
#    define GL_IMAGE_PIXEL_TYPE 0x82AA
#  endif
#  ifndef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
#    define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#  endif
#  ifndef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
#    define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#  endif
#  ifndef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
#    define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#  endif
#  ifndef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
#    define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#  endif
#  ifndef GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
#    define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#  endif
#  ifndef GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
#    define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#  endif
#  ifndef GL_TEXTURE_COMPRESSED_BLOCK_SIZE
#    define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#  endif
#  ifndef GL_CLEAR_BUFFER
#    define GL_CLEAR_BUFFER 0x82B4
#  endif
#  ifndef GL_TEXTURE_VIEW
#    define GL_TEXTURE_VIEW 0x82B5
#  endif
#  ifndef GL_VIEW_COMPATIBILITY_CLASS
#    define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#  endif
#  ifndef GL_FULL_SUPPORT
#    define GL_FULL_SUPPORT 0x82B7
#  endif
#  ifndef GL_CAVEAT_SUPPORT
#    define GL_CAVEAT_SUPPORT 0x82B8
#  endif
#  ifndef GL_IMAGE_CLASS_4_X_32
#    define GL_IMAGE_CLASS_4_X_32 0x82B9
#  endif
#  ifndef GL_IMAGE_CLASS_2_X_32
#    define GL_IMAGE_CLASS_2_X_32 0x82BA
#  endif
#  ifndef GL_IMAGE_CLASS_1_X_32
#    define GL_IMAGE_CLASS_1_X_32 0x82BB
#  endif
#  ifndef GL_IMAGE_CLASS_4_X_16
#    define GL_IMAGE_CLASS_4_X_16 0x82BC
#  endif
#  ifndef GL_IMAGE_CLASS_2_X_16
#    define GL_IMAGE_CLASS_2_X_16 0x82BD
#  endif
#  ifndef GL_IMAGE_CLASS_1_X_16
#    define GL_IMAGE_CLASS_1_X_16 0x82BE
#  endif
#  ifndef GL_IMAGE_CLASS_4_X_8
#    define GL_IMAGE_CLASS_4_X_8 0x82BF
#  endif
#  ifndef GL_IMAGE_CLASS_2_X_8
#    define GL_IMAGE_CLASS_2_X_8 0x82C0
#  endif
#  ifndef GL_IMAGE_CLASS_1_X_8
#    define GL_IMAGE_CLASS_1_X_8 0x82C1
#  endif
#  ifndef GL_IMAGE_CLASS_11_11_10
#    define GL_IMAGE_CLASS_11_11_10 0x82C2
#  endif
#  ifndef GL_IMAGE_CLASS_10_10_10_2
#    define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#  endif
#  ifndef GL_VIEW_CLASS_128_BITS
#    define GL_VIEW_CLASS_128_BITS 0x82C4
#  endif
#  ifndef GL_VIEW_CLASS_96_BITS
#    define GL_VIEW_CLASS_96_BITS 0x82C5
#  endif
#  ifndef GL_VIEW_CLASS_64_BITS
#    define GL_VIEW_CLASS_64_BITS 0x82C6
#  endif
#  ifndef GL_VIEW_CLASS_48_BITS
#    define GL_VIEW_CLASS_48_BITS 0x82C7
#  endif
#  ifndef GL_VIEW_CLASS_32_BITS
#    define GL_VIEW_CLASS_32_BITS 0x82C8
#  endif
#  ifndef GL_VIEW_CLASS_24_BITS
#    define GL_VIEW_CLASS_24_BITS 0x82C9
#  endif
#  ifndef GL_VIEW_CLASS_16_BITS
#    define GL_VIEW_CLASS_16_BITS 0x82CA
#  endif
#  ifndef GL_VIEW_CLASS_8_BITS
#    define GL_VIEW_CLASS_8_BITS 0x82CB
#  endif
#  ifndef GL_VIEW_CLASS_S3TC_DXT1_RGB
#    define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#  endif
#  ifndef GL_VIEW_CLASS_S3TC_DXT1_RGBA
#    define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#  endif
#  ifndef GL_VIEW_CLASS_S3TC_DXT3_RGBA
#    define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#  endif
#  ifndef GL_VIEW_CLASS_S3TC_DXT5_RGBA
#    define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#  endif
#  ifndef GL_VIEW_CLASS_RGTC1_RED
#    define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#  endif
#  ifndef GL_VIEW_CLASS_RGTC2_RG
#    define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#  endif
#  ifndef GL_VIEW_CLASS_BPTC_UNORM
#    define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#  endif
#  ifndef GL_VIEW_CLASS_BPTC_FLOAT
#    define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#  endif
#  ifndef GL_UNIFORM
#    define GL_UNIFORM 0x92E1
#  endif
#  ifndef GL_UNIFORM_BLOCK
#    define GL_UNIFORM_BLOCK 0x92E2
#  endif
#  ifndef GL_PROGRAM_INPUT
#    define GL_PROGRAM_INPUT 0x92E3
#  endif
#  ifndef GL_PROGRAM_OUTPUT
#    define GL_PROGRAM_OUTPUT 0x92E4
#  endif
#  ifndef GL_BUFFER_VARIABLE
#    define GL_BUFFER_VARIABLE 0x92E5
#  endif
#  ifndef GL_SHADER_STORAGE_BLOCK
#    define GL_SHADER_STORAGE_BLOCK 0x92E6
#  endif
#  ifndef GL_VERTEX_SUBROUTINE
#    define GL_VERTEX_SUBROUTINE 0x92E8
#  endif
#  ifndef GL_TESS_CONTROL_SUBROUTINE
#    define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#  endif
#  ifndef GL_TESS_EVALUATION_SUBROUTINE
#    define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#  endif
#  ifndef GL_GEOMETRY_SUBROUTINE
#    define GL_GEOMETRY_SUBROUTINE 0x92EB
#  endif
#  ifndef GL_FRAGMENT_SUBROUTINE
#    define GL_FRAGMENT_SUBROUTINE 0x92EC
#  endif
#  ifndef GL_COMPUTE_SUBROUTINE
#    define GL_COMPUTE_SUBROUTINE 0x92ED
#  endif
#  ifndef GL_VERTEX_SUBROUTINE_UNIFORM
#    define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#  endif
#  ifndef GL_TESS_CONTROL_SUBROUTINE_UNIFORM
#    define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#  endif
#  ifndef GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
#    define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#  endif
#  ifndef GL_GEOMETRY_SUBROUTINE_UNIFORM
#    define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#  endif
#  ifndef GL_FRAGMENT_SUBROUTINE_UNIFORM
#    define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#  endif
#  ifndef GL_COMPUTE_SUBROUTINE_UNIFORM
#    define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_VARYING
#    define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#  endif
#  ifndef GL_ACTIVE_RESOURCES
#    define GL_ACTIVE_RESOURCES 0x92F5
#  endif
#  ifndef GL_MAX_NAME_LENGTH
#    define GL_MAX_NAME_LENGTH 0x92F6
#  endif
#  ifndef GL_MAX_NUM_ACTIVE_VARIABLES
#    define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#  endif
#  ifndef GL_MAX_NUM_COMPATIBLE_SUBROUTINES
#    define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#  endif
#  ifndef GL_NAME_LENGTH
#    define GL_NAME_LENGTH 0x92F9
#  endif
#  ifndef GL_TYPE
#    define GL_TYPE 0x92FA
#  endif
#  ifndef GL_ARRAY_SIZE
#    define GL_ARRAY_SIZE 0x92FB
#  endif
#  ifndef GL_OFFSET
#    define GL_OFFSET 0x92FC
#  endif
#  ifndef GL_BLOCK_INDEX
#    define GL_BLOCK_INDEX 0x92FD
#  endif
#  ifndef GL_ARRAY_STRIDE
#    define GL_ARRAY_STRIDE 0x92FE
#  endif
#  ifndef GL_MATRIX_STRIDE
#    define GL_MATRIX_STRIDE 0x92FF
#  endif
#  ifndef GL_IS_ROW_MAJOR
#    define GL_IS_ROW_MAJOR 0x9300
#  endif
#  ifndef GL_ATOMIC_COUNTER_BUFFER_INDEX
#    define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#  endif
#  ifndef GL_BUFFER_BINDING
#    define GL_BUFFER_BINDING 0x9302
#  endif
#  ifndef GL_BUFFER_DATA_SIZE
#    define GL_BUFFER_DATA_SIZE 0x9303
#  endif
#  ifndef GL_NUM_ACTIVE_VARIABLES
#    define GL_NUM_ACTIVE_VARIABLES 0x9304
#  endif
#  ifndef GL_ACTIVE_VARIABLES
#    define GL_ACTIVE_VARIABLES 0x9305
#  endif
#  ifndef GL_REFERENCED_BY_VERTEX_SHADER
#    define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#  endif
#  ifndef GL_REFERENCED_BY_TESS_CONTROL_SHADER
#    define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#  endif
#  ifndef GL_REFERENCED_BY_TESS_EVALUATION_SHADER
#    define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#  endif
#  ifndef GL_REFERENCED_BY_GEOMETRY_SHADER
#    define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#  endif
#  ifndef GL_REFERENCED_BY_FRAGMENT_SHADER
#    define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#  endif
#  ifndef GL_REFERENCED_BY_COMPUTE_SHADER
#    define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#  endif
#  ifndef GL_TOP_LEVEL_ARRAY_SIZE
#    define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#  endif
#  ifndef GL_TOP_LEVEL_ARRAY_STRIDE
#    define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#  endif
#  ifndef GL_LOCATION
#    define GL_LOCATION 0x930E
#  endif
#  ifndef GL_LOCATION_INDEX
#    define GL_LOCATION_INDEX 0x930F
#  endif
#  ifndef GL_IS_PER_PATCH
#    define GL_IS_PER_PATCH 0x92E7
#  endif
#  ifndef GL_SHADER_STORAGE_BUFFER
#    define GL_SHADER_STORAGE_BUFFER 0x90D2
#  endif
#  ifndef GL_SHADER_STORAGE_BUFFER_BINDING
#    define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#  endif
#  ifndef GL_SHADER_STORAGE_BUFFER_START
#    define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#  endif
#  ifndef GL_SHADER_STORAGE_BUFFER_SIZE
#    define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#  endif
#  ifndef GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
#    define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#  endif
#  ifndef GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
#    define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#  endif
#  ifndef GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
#    define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#  endif
#  ifndef GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
#    define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#  endif
#  ifndef GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
#    define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#  endif
#  ifndef GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
#    define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#  endif
#  ifndef GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
#    define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#  endif
#  ifndef GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
#    define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#  endif
#  ifndef GL_MAX_SHADER_STORAGE_BLOCK_SIZE
#    define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#  endif
#  ifndef GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
#    define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#  endif
#  ifndef GL_SHADER_STORAGE_BARRIER_BIT
#    define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#  endif
#  ifndef GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
#    define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#  endif
#  ifndef GL_DEPTH_STENCIL_TEXTURE_MODE
#    define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#  endif
#  ifndef GL_TEXTURE_BUFFER_OFFSET
#    define GL_TEXTURE_BUFFER_OFFSET 0x919D
#  endif
#  ifndef GL_TEXTURE_BUFFER_SIZE
#    define GL_TEXTURE_BUFFER_SIZE 0x919E
#  endif
#  ifndef GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
#    define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#  endif
#  ifndef GL_TEXTURE_VIEW_MIN_LEVEL
#    define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#  endif
#  ifndef GL_TEXTURE_VIEW_NUM_LEVELS
#    define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#  endif
#  ifndef GL_TEXTURE_VIEW_MIN_LAYER
#    define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#  endif
#  ifndef GL_TEXTURE_VIEW_NUM_LAYERS
#    define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#  endif
#  ifndef GL_TEXTURE_IMMUTABLE_LEVELS
#    define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#  endif
#  ifndef GL_VERTEX_ATTRIB_BINDING
#    define GL_VERTEX_ATTRIB_BINDING 0x82D4
#  endif
#  ifndef GL_VERTEX_ATTRIB_RELATIVE_OFFSET
#    define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#  endif
#  ifndef GL_VERTEX_BINDING_DIVISOR
#    define GL_VERTEX_BINDING_DIVISOR 0x82D6
#  endif
#  ifndef GL_VERTEX_BINDING_OFFSET
#    define GL_VERTEX_BINDING_OFFSET 0x82D7
#  endif
#  ifndef GL_VERTEX_BINDING_STRIDE
#    define GL_VERTEX_BINDING_STRIDE 0x82D8
#  endif
#  ifndef GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
#    define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#  endif
#  ifndef GL_MAX_VERTEX_ATTRIB_BINDINGS
#    define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#  endif
#  ifndef GL_VERTEX_BINDING_BUFFER
#    define GL_VERTEX_BINDING_BUFFER 0x8F4F
#  endif
#  ifndef GL_DISPLAY_LIST
#    define GL_DISPLAY_LIST 0x82E7
#  endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glClearBufferData
typedef void (APIENTRYP PFNGLUXCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
#endif
#ifndef __GLUX__GLFCT_glClearBufferSubData
typedef void (APIENTRYP PFNGLUXCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
#endif
#ifndef __GLUX__GLFCT_glDispatchCompute
typedef void (APIENTRYP PFNGLUXDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
#endif
#ifndef __GLUX__GLFCT_glDispatchComputeIndirect
typedef void (APIENTRYP PFNGLUXDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);
#endif
#ifndef __GLUX__GLFCT_glCopyImageSubData
typedef void (APIENTRYP PFNGLUXCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
#endif
#ifndef __GLUX__GLFCT_glFramebufferParameteri
typedef void (APIENTRYP PFNGLUXFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);
#endif
#ifndef __GLUX__GLFCT_glGetFramebufferParameteriv
typedef void (APIENTRYP PFNGLUXGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetInternalformati64v
typedef void (APIENTRYP PFNGLUXGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
#endif
#ifndef __GLUX__GLFCT_glInvalidateTexSubImage
typedef void (APIENTRYP PFNGLUXINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
#endif
#ifndef __GLUX__GLFCT_glInvalidateTexImage
typedef void (APIENTRYP PFNGLUXINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);
#endif
#ifndef __GLUX__GLFCT_glInvalidateBufferSubData
typedef void (APIENTRYP PFNGLUXINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
#endif
#ifndef __GLUX__GLFCT_glInvalidateBufferData
typedef void (APIENTRYP PFNGLUXINVALIDATEBUFFERDATAPROC) (GLuint buffer);
#endif
#ifndef __GLUX__GLFCT_glInvalidateFramebuffer
typedef void (APIENTRYP PFNGLUXINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);
#endif
#ifndef __GLUX__GLFCT_glInvalidateSubFramebuffer
typedef void (APIENTRYP PFNGLUXINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
#endif
#ifndef __GLUX__GLFCT_glMultiDrawArraysIndirect
typedef void (APIENTRYP PFNGLUXMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
#endif
#ifndef __GLUX__GLFCT_glMultiDrawElementsIndirect
typedef void (APIENTRYP PFNGLUXMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
#endif
#ifndef __GLUX__GLFCT_glGetProgramInterfaceiv
typedef void (APIENTRYP PFNGLUXGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetProgramResourceIndex
typedef GLuint (APIENTRYP PFNGLUXGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glGetProgramResourceName
typedef void (APIENTRYP PFNGLUXGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glGetProgramResourceiv
typedef void (APIENTRYP PFNGLUXGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetProgramResourceLocation
typedef GLint (APIENTRYP PFNGLUXGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glGetProgramResourceLocationIndex
typedef GLint (APIENTRYP PFNGLUXGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glShaderStorageBlockBinding
typedef void (APIENTRYP PFNGLUXSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
#endif
#ifndef __GLUX__GLFCT_glTexBufferRange
typedef void (APIENTRYP PFNGLUXTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
#endif
#ifndef __GLUX__GLFCT_glTexStorage2DMultisample
typedef void (APIENTRYP PFNGLUXTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
#endif
#ifndef __GLUX__GLFCT_glTexStorage3DMultisample
typedef void (APIENTRYP PFNGLUXTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#endif
#ifndef __GLUX__GLFCT_glTextureView
typedef void (APIENTRYP PFNGLUXTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
#endif
#ifndef __GLUX__GLFCT_glBindVertexBuffer
typedef void (APIENTRYP PFNGLUXBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribFormat
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribIFormat
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribLFormat
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
#endif
#ifndef __GLUX__GLFCT_glVertexAttribBinding
typedef void (APIENTRYP PFNGLUXVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);
#endif
#ifndef __GLUX__GLFCT_glVertexBindingDivisor
typedef void (APIENTRYP PFNGLUXVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageControl
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
typedef void (APIENTRYP PFNGLUXDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
typedef GLuint (APIENTRYP PFNGLUXGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
typedef void (APIENTRYP PFNGLUXPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
typedef void (APIENTRYP PFNGLUXPOPDEBUGGROUPPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
typedef void (APIENTRYP PFNGLUXOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
typedef void (APIENTRYP PFNGLUXOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLUXGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glClearBufferData
extern PFNGLUXCLEARBUFFERDATAPROC glClearBufferData;
#endif
#ifndef __GLUX__GLFCT_glClearBufferSubData
extern PFNGLUXCLEARBUFFERSUBDATAPROC glClearBufferSubData;
#endif
#ifndef __GLUX__GLFCT_glDispatchCompute
extern PFNGLUXDISPATCHCOMPUTEPROC glDispatchCompute;
#endif
#ifndef __GLUX__GLFCT_glDispatchComputeIndirect
extern PFNGLUXDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
#endif
#ifndef __GLUX__GLFCT_glCopyImageSubData
extern PFNGLUXCOPYIMAGESUBDATAPROC glCopyImageSubData;
#endif
#ifndef __GLUX__GLFCT_glFramebufferParameteri
extern PFNGLUXFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
#endif
#ifndef __GLUX__GLFCT_glGetFramebufferParameteriv
extern PFNGLUXGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
#endif
#ifndef __GLUX__GLFCT_glGetInternalformati64v
extern PFNGLUXGETINTERNALFORMATI64VPROC glGetInternalformati64v;
#endif
#ifndef __GLUX__GLFCT_glInvalidateTexSubImage
extern PFNGLUXINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
#endif
#ifndef __GLUX__GLFCT_glInvalidateTexImage
extern PFNGLUXINVALIDATETEXIMAGEPROC glInvalidateTexImage;
#endif
#ifndef __GLUX__GLFCT_glInvalidateBufferSubData
extern PFNGLUXINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
#endif
#ifndef __GLUX__GLFCT_glInvalidateBufferData
extern PFNGLUXINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
#endif
#ifndef __GLUX__GLFCT_glInvalidateFramebuffer
extern PFNGLUXINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
#endif
#ifndef __GLUX__GLFCT_glInvalidateSubFramebuffer
extern PFNGLUXINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
#endif
#ifndef __GLUX__GLFCT_glMultiDrawArraysIndirect
extern PFNGLUXMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
#endif
#ifndef __GLUX__GLFCT_glMultiDrawElementsIndirect
extern PFNGLUXMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
#endif
#ifndef __GLUX__GLFCT_glGetProgramInterfaceiv
extern PFNGLUXGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
#endif
#ifndef __GLUX__GLFCT_glGetProgramResourceIndex
extern PFNGLUXGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
#endif
#ifndef __GLUX__GLFCT_glGetProgramResourceName
extern PFNGLUXGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
#endif
#ifndef __GLUX__GLFCT_glGetProgramResourceiv
extern PFNGLUXGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
#endif
#ifndef __GLUX__GLFCT_glGetProgramResourceLocation
extern PFNGLUXGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
#endif
#ifndef __GLUX__GLFCT_glGetProgramResourceLocationIndex
extern PFNGLUXGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
#endif
#ifndef __GLUX__GLFCT_glShaderStorageBlockBinding
extern PFNGLUXSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
#endif
#ifndef __GLUX__GLFCT_glTexBufferRange
extern PFNGLUXTEXBUFFERRANGEPROC glTexBufferRange;
#endif
#ifndef __GLUX__GLFCT_glTexStorage2DMultisample
extern PFNGLUXTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
#endif
#ifndef __GLUX__GLFCT_glTexStorage3DMultisample
extern PFNGLUXTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
#endif
#ifndef __GLUX__GLFCT_glTextureView
extern PFNGLUXTEXTUREVIEWPROC glTextureView;
#endif
#ifndef __GLUX__GLFCT_glBindVertexBuffer
extern PFNGLUXBINDVERTEXBUFFERPROC glBindVertexBuffer;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribFormat
extern PFNGLUXVERTEXATTRIBFORMATPROC glVertexAttribFormat;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribIFormat
extern PFNGLUXVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribLFormat
extern PFNGLUXVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
#endif
#ifndef __GLUX__GLFCT_glVertexAttribBinding
extern PFNGLUXVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
#endif
#ifndef __GLUX__GLFCT_glVertexBindingDivisor
extern PFNGLUXVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageControl
extern PFNGLUXDEBUGMESSAGECONTROLPROC glDebugMessageControl;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageInsert
extern PFNGLUXDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
#endif
#ifndef __GLUX__GLFCT_glDebugMessageCallback
extern PFNGLUXDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
#endif
#ifndef __GLUX__GLFCT_glGetDebugMessageLog
extern PFNGLUXGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
#endif
#ifndef __GLUX__GLFCT_glPushDebugGroup
extern PFNGLUXPUSHDEBUGGROUPPROC glPushDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glPopDebugGroup
extern PFNGLUXPOPDEBUGGROUPPROC glPopDebugGroup;
#endif
#ifndef __GLUX__GLFCT_glObjectLabel
extern PFNGLUXOBJECTLABELPROC glObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectLabel
extern PFNGLUXGETOBJECTLABELPROC glGetObjectLabel;
#endif
#ifndef __GLUX__GLFCT_glObjectPtrLabel
extern PFNGLUXOBJECTPTRLABELPROC glObjectPtrLabel;
#endif
#ifndef __GLUX__GLFCT_glGetObjectPtrLabel
extern PFNGLUXGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
