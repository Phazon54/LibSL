
// --------------------------------------------------------
// Generated by glux perl script (Fri Feb  7 10:09:04 2020)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#if defined(_WIN32) || defined(_WIN64)
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#if defined(_WIN32) || defined(_WIN64)
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
//#  include "glux_glext_apple.h"
#  include "glux_glext.h"
#else
#ifdef EMSCRIPTEN
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_NV_command_list__
#define __GLUX_GL_NV_command_list__

GLUX_NEW_PLUGIN(GL_NV_command_list)
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#  ifndef GL_TERMINATE_SEQUENCE_COMMAND_NV
#    define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000
#  endif
#  ifndef GL_NOP_COMMAND_NV
#    define GL_NOP_COMMAND_NV 0x0001
#  endif
#  ifndef GL_DRAW_ELEMENTS_COMMAND_NV
#    define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002
#  endif
#  ifndef GL_DRAW_ARRAYS_COMMAND_NV
#    define GL_DRAW_ARRAYS_COMMAND_NV 0x0003
#  endif
#  ifndef GL_DRAW_ELEMENTS_STRIP_COMMAND_NV
#    define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
#  endif
#  ifndef GL_DRAW_ARRAYS_STRIP_COMMAND_NV
#    define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005
#  endif
#  ifndef GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
#    define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
#  endif
#  ifndef GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV
#    define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
#  endif
#  ifndef GL_ELEMENT_ADDRESS_COMMAND_NV
#    define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008
#  endif
#  ifndef GL_ATTRIBUTE_ADDRESS_COMMAND_NV
#    define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009
#  endif
#  ifndef GL_UNIFORM_ADDRESS_COMMAND_NV
#    define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A
#  endif
#  ifndef GL_BLEND_COLOR_COMMAND_NV
#    define GL_BLEND_COLOR_COMMAND_NV 0x000B
#  endif
#  ifndef GL_STENCIL_REF_COMMAND_NV
#    define GL_STENCIL_REF_COMMAND_NV 0x000C
#  endif
#  ifndef GL_LINE_WIDTH_COMMAND_NV
#    define GL_LINE_WIDTH_COMMAND_NV 0x000D
#  endif
#  ifndef GL_POLYGON_OFFSET_COMMAND_NV
#    define GL_POLYGON_OFFSET_COMMAND_NV 0x000E
#  endif
#  ifndef GL_ALPHA_REF_COMMAND_NV
#    define GL_ALPHA_REF_COMMAND_NV 0x000F
#  endif
#  ifndef GL_VIEWPORT_COMMAND_NV
#    define GL_VIEWPORT_COMMAND_NV 0x0010
#  endif
#  ifndef GL_SCISSOR_COMMAND_NV
#    define GL_SCISSOR_COMMAND_NV 0x0011
#  endif
#  ifndef GL_FRONT_FACE_COMMAND_NV
#    define GL_FRONT_FACE_COMMAND_NV 0x0012
#  endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glCreateStatesNV
typedef void (APIENTRYP PFNGLUXCREATESTATESNVPROC) (GLsizei n, GLuint *states);
#endif
#ifndef __GLUX__GLFCT_glDeleteStatesNV
typedef void (APIENTRYP PFNGLUXDELETESTATESNVPROC) (GLsizei n, const GLuint *states);
#endif
#ifndef __GLUX__GLFCT_glIsStateNV
typedef GLboolean (APIENTRYP PFNGLUXISSTATENVPROC) (GLuint state);
#endif
#ifndef __GLUX__GLFCT_glStateCaptureNV
typedef void (APIENTRYP PFNGLUXSTATECAPTURENVPROC) (GLuint state, GLenum mode);
#endif
#ifndef __GLUX__GLFCT_glGetCommandHeaderNV
typedef GLuint (APIENTRYP PFNGLUXGETCOMMANDHEADERNVPROC) (GLenum tokenID, GLuint size);
#endif
#ifndef __GLUX__GLFCT_glGetStageIndexNV
typedef GLushort (APIENTRYP PFNGLUXGETSTAGEINDEXNVPROC) (GLenum shadertype);
#endif
#ifndef __GLUX__GLFCT_glDrawCommandsNV
typedef void (APIENTRYP PFNGLUXDRAWCOMMANDSNVPROC) (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
#endif
#ifndef __GLUX__GLFCT_glDrawCommandsAddressNV
typedef void (APIENTRYP PFNGLUXDRAWCOMMANDSADDRESSNVPROC) (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
#endif
#ifndef __GLUX__GLFCT_glDrawCommandsStatesNV
typedef void (APIENTRYP PFNGLUXDRAWCOMMANDSSTATESNVPROC) (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
#endif
#ifndef __GLUX__GLFCT_glDrawCommandsStatesAddressNV
typedef void (APIENTRYP PFNGLUXDRAWCOMMANDSSTATESADDRESSNVPROC) (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
#endif
#ifndef __GLUX__GLFCT_glCreateCommandListsNV
typedef void (APIENTRYP PFNGLUXCREATECOMMANDLISTSNVPROC) (GLsizei n, GLuint *lists);
#endif
#ifndef __GLUX__GLFCT_glDeleteCommandListsNV
typedef void (APIENTRYP PFNGLUXDELETECOMMANDLISTSNVPROC) (GLsizei n, const GLuint *lists);
#endif
#ifndef __GLUX__GLFCT_glIsCommandListNV
typedef GLboolean (APIENTRYP PFNGLUXISCOMMANDLISTNVPROC) (GLuint list);
#endif
#ifndef __GLUX__GLFCT_glListDrawCommandsStatesClientNV
typedef void (APIENTRYP PFNGLUXLISTDRAWCOMMANDSSTATESCLIENTNVPROC) (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
#endif
#ifndef __GLUX__GLFCT_glCommandListSegmentsNV
typedef void (APIENTRYP PFNGLUXCOMMANDLISTSEGMENTSNVPROC) (GLuint list, GLuint segments);
#endif
#ifndef __GLUX__GLFCT_glCompileCommandListNV
typedef void (APIENTRYP PFNGLUXCOMPILECOMMANDLISTNVPROC) (GLuint list);
#endif
#ifndef __GLUX__GLFCT_glCallCommandListNV
typedef void (APIENTRYP PFNGLUXCALLCOMMANDLISTNVPROC) (GLuint list);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glCreateStatesNV
extern PFNGLUXCREATESTATESNVPROC glCreateStatesNV;
#endif
#ifndef __GLUX__GLFCT_glDeleteStatesNV
extern PFNGLUXDELETESTATESNVPROC glDeleteStatesNV;
#endif
#ifndef __GLUX__GLFCT_glIsStateNV
extern PFNGLUXISSTATENVPROC glIsStateNV;
#endif
#ifndef __GLUX__GLFCT_glStateCaptureNV
extern PFNGLUXSTATECAPTURENVPROC glStateCaptureNV;
#endif
#ifndef __GLUX__GLFCT_glGetCommandHeaderNV
extern PFNGLUXGETCOMMANDHEADERNVPROC glGetCommandHeaderNV;
#endif
#ifndef __GLUX__GLFCT_glGetStageIndexNV
extern PFNGLUXGETSTAGEINDEXNVPROC glGetStageIndexNV;
#endif
#ifndef __GLUX__GLFCT_glDrawCommandsNV
extern PFNGLUXDRAWCOMMANDSNVPROC glDrawCommandsNV;
#endif
#ifndef __GLUX__GLFCT_glDrawCommandsAddressNV
extern PFNGLUXDRAWCOMMANDSADDRESSNVPROC glDrawCommandsAddressNV;
#endif
#ifndef __GLUX__GLFCT_glDrawCommandsStatesNV
extern PFNGLUXDRAWCOMMANDSSTATESNVPROC glDrawCommandsStatesNV;
#endif
#ifndef __GLUX__GLFCT_glDrawCommandsStatesAddressNV
extern PFNGLUXDRAWCOMMANDSSTATESADDRESSNVPROC glDrawCommandsStatesAddressNV;
#endif
#ifndef __GLUX__GLFCT_glCreateCommandListsNV
extern PFNGLUXCREATECOMMANDLISTSNVPROC glCreateCommandListsNV;
#endif
#ifndef __GLUX__GLFCT_glDeleteCommandListsNV
extern PFNGLUXDELETECOMMANDLISTSNVPROC glDeleteCommandListsNV;
#endif
#ifndef __GLUX__GLFCT_glIsCommandListNV
extern PFNGLUXISCOMMANDLISTNVPROC glIsCommandListNV;
#endif
#ifndef __GLUX__GLFCT_glListDrawCommandsStatesClientNV
extern PFNGLUXLISTDRAWCOMMANDSSTATESCLIENTNVPROC glListDrawCommandsStatesClientNV;
#endif
#ifndef __GLUX__GLFCT_glCommandListSegmentsNV
extern PFNGLUXCOMMANDLISTSEGMENTSNVPROC glCommandListSegmentsNV;
#endif
#ifndef __GLUX__GLFCT_glCompileCommandListNV
extern PFNGLUXCOMPILECOMMANDLISTNVPROC glCompileCommandListNV;
#endif
#ifndef __GLUX__GLFCT_glCallCommandListNV
extern PFNGLUXCALLCOMMANDLISTNVPROC glCallCommandListNV;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
