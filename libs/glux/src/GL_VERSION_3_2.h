
// --------------------------------------------------------
// Generated by glux perl script (Fri Feb  7 10:09:04 2020)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#if defined(_WIN32) || defined(_WIN64)
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#if defined(_WIN32) || defined(_WIN64)
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
//#  include "glux_glext_apple.h"
#  include "glux_glext.h"
#else
#ifdef EMSCRIPTEN
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_VERSION_3_2__
#define __GLUX_GL_VERSION_3_2__

GLUX_NEW_PLUGIN(GL_VERSION_3_2)
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GLEXT_64_TYPES_DEFINED
#  ifndef GLEXT_64_TYPES_DEFINED
#    define GLEXT_64_TYPES_DEFINED 
#  endif
#endif
#  ifndef GL_CONTEXT_CORE_PROFILE_BIT
#    define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#  endif
#  ifndef GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
#    define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#  endif
#  ifndef GL_LINES_ADJACENCY
#    define GL_LINES_ADJACENCY 0x000A
#  endif
#  ifndef GL_LINE_STRIP_ADJACENCY
#    define GL_LINE_STRIP_ADJACENCY 0x000B
#  endif
#  ifndef GL_TRIANGLES_ADJACENCY
#    define GL_TRIANGLES_ADJACENCY 0x000C
#  endif
#  ifndef GL_TRIANGLE_STRIP_ADJACENCY
#    define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#  endif
#  ifndef GL_PROGRAM_POINT_SIZE
#    define GL_PROGRAM_POINT_SIZE 0x8642
#  endif
#  ifndef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
#    define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#  endif
#  ifndef GL_FRAMEBUFFER_ATTACHMENT_LAYERED
#    define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#  endif
#  ifndef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
#    define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#  endif
#  ifndef GL_GEOMETRY_SHADER
#    define GL_GEOMETRY_SHADER 0x8DD9
#  endif
#  ifndef GL_GEOMETRY_VERTICES_OUT
#    define GL_GEOMETRY_VERTICES_OUT 0x8916
#  endif
#  ifndef GL_GEOMETRY_INPUT_TYPE
#    define GL_GEOMETRY_INPUT_TYPE 0x8917
#  endif
#  ifndef GL_GEOMETRY_OUTPUT_TYPE
#    define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#  endif
#  ifndef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
#    define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#  endif
#  ifndef GL_MAX_GEOMETRY_OUTPUT_VERTICES
#    define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#  endif
#  ifndef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
#    define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#  endif
#  ifndef GL_MAX_VERTEX_OUTPUT_COMPONENTS
#    define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#  endif
#  ifndef GL_MAX_GEOMETRY_INPUT_COMPONENTS
#    define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#  endif
#  ifndef GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
#    define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#  endif
#  ifndef GL_MAX_FRAGMENT_INPUT_COMPONENTS
#    define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#  endif
#  ifndef GL_CONTEXT_PROFILE_MASK
#    define GL_CONTEXT_PROFILE_MASK 0x9126
#  endif
#  ifndef GL_DEPTH_CLAMP
#    define GL_DEPTH_CLAMP 0x864F
#  endif
#  ifndef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#    define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#  endif
#  ifndef GL_FIRST_VERTEX_CONVENTION
#    define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#  endif
#  ifndef GL_LAST_VERTEX_CONVENTION
#    define GL_LAST_VERTEX_CONVENTION 0x8E4E
#  endif
#  ifndef GL_PROVOKING_VERTEX
#    define GL_PROVOKING_VERTEX 0x8E4F
#  endif
#  ifndef GL_TEXTURE_CUBE_MAP_SEAMLESS
#    define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#  endif
#  ifndef GL_MAX_SERVER_WAIT_TIMEOUT
#    define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#  endif
#  ifndef GL_OBJECT_TYPE
#    define GL_OBJECT_TYPE 0x9112
#  endif
#  ifndef GL_SYNC_CONDITION
#    define GL_SYNC_CONDITION 0x9113
#  endif
#  ifndef GL_SYNC_STATUS
#    define GL_SYNC_STATUS 0x9114
#  endif
#  ifndef GL_SYNC_FLAGS
#    define GL_SYNC_FLAGS 0x9115
#  endif
#  ifndef GL_SYNC_FENCE
#    define GL_SYNC_FENCE 0x9116
#  endif
#  ifndef GL_SYNC_GPU_COMMANDS_COMPLETE
#    define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#  endif
#  ifndef GL_UNSIGNALED
#    define GL_UNSIGNALED 0x9118
#  endif
#  ifndef GL_SIGNALED
#    define GL_SIGNALED 0x9119
#  endif
#  ifndef GL_ALREADY_SIGNALED
#    define GL_ALREADY_SIGNALED 0x911A
#  endif
#  ifndef GL_TIMEOUT_EXPIRED
#    define GL_TIMEOUT_EXPIRED 0x911B
#  endif
#  ifndef GL_CONDITION_SATISFIED
#    define GL_CONDITION_SATISFIED 0x911C
#  endif
#  ifndef GL_WAIT_FAILED
#    define GL_WAIT_FAILED 0x911D
#  endif
#  ifndef GL_TIMEOUT_IGNORED
#    define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFFull
#  endif
#  ifndef GL_SYNC_FLUSH_COMMANDS_BIT
#    define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#  endif
#  ifndef GL_SAMPLE_POSITION
#    define GL_SAMPLE_POSITION 0x8E50
#  endif
#  ifndef GL_SAMPLE_MASK
#    define GL_SAMPLE_MASK 0x8E51
#  endif
#  ifndef GL_SAMPLE_MASK_VALUE
#    define GL_SAMPLE_MASK_VALUE 0x8E52
#  endif
#  ifndef GL_MAX_SAMPLE_MASK_WORDS
#    define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#  endif
#  ifndef GL_TEXTURE_2D_MULTISAMPLE
#    define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#  endif
#  ifndef GL_PROXY_TEXTURE_2D_MULTISAMPLE
#    define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#  endif
#  ifndef GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#    define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#  endif
#  ifndef GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#    define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#  endif
#  ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE
#    define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#  endif
#  ifndef GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#    define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#  endif
#  ifndef GL_TEXTURE_SAMPLES
#    define GL_TEXTURE_SAMPLES 0x9106
#  endif
#  ifndef GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#    define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#  endif
#  ifndef GL_SAMPLER_2D_MULTISAMPLE
#    define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#  endif
#  ifndef GL_INT_SAMPLER_2D_MULTISAMPLE
#    define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#  endif
#  ifndef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#    define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#  endif
#  ifndef GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#    define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#  endif
#  ifndef GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#    define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#  endif
#  ifndef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#    define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#  endif
#  ifndef GL_MAX_COLOR_TEXTURE_SAMPLES
#    define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#  endif
#  ifndef GL_MAX_DEPTH_TEXTURE_SAMPLES
#    define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#  endif
#  ifndef GL_MAX_INTEGER_SAMPLES
#    define GL_MAX_INTEGER_SAMPLES 0x9110
#  endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDrawElementsBaseVertex
typedef void (APIENTRYP PFNGLUXDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
#endif
#ifndef __GLUX__GLFCT_glDrawRangeElementsBaseVertex
typedef void (APIENTRYP PFNGLUXDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
#endif
#ifndef __GLUX__GLFCT_glDrawElementsInstancedBaseVertex
typedef void (APIENTRYP PFNGLUXDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
#endif
#ifndef __GLUX__GLFCT_glMultiDrawElementsBaseVertex
typedef void (APIENTRYP PFNGLUXMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
#endif
#ifndef __GLUX__GLFCT_glProvokingVertex
typedef void (APIENTRYP PFNGLUXPROVOKINGVERTEXPROC) (GLenum mode);
#endif
#ifndef __GLUX__GLFCT_glFenceSync
typedef GLsync (APIENTRYP PFNGLUXFENCESYNCPROC) (GLenum condition, GLbitfield flags);
#endif
#ifndef __GLUX__GLFCT_glIsSync
typedef GLboolean (APIENTRYP PFNGLUXISSYNCPROC) (GLsync sync);
#endif
#ifndef __GLUX__GLFCT_glDeleteSync
typedef void (APIENTRYP PFNGLUXDELETESYNCPROC) (GLsync sync);
#endif
#ifndef __GLUX__GLFCT_glClientWaitSync
typedef GLenum (APIENTRYP PFNGLUXCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
#endif
#ifndef __GLUX__GLFCT_glWaitSync
typedef void (APIENTRYP PFNGLUXWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
#endif
#ifndef __GLUX__GLFCT_glGetInteger64v
typedef void (APIENTRYP PFNGLUXGETINTEGER64VPROC) (GLenum pname, GLint64 *data);
#endif
#ifndef __GLUX__GLFCT_glGetSynciv
typedef void (APIENTRYP PFNGLUXGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
#endif
#ifndef __GLUX__GLFCT_glGetInteger64i_v
typedef void (APIENTRYP PFNGLUXGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);
#endif
#ifndef __GLUX__GLFCT_glGetBufferParameteri64v
typedef void (APIENTRYP PFNGLUXGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);
#endif
#ifndef __GLUX__GLFCT_glFramebufferTexture
typedef void (APIENTRYP PFNGLUXFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
#endif
#ifndef __GLUX__GLFCT_glTexImage2DMultisample
typedef void (APIENTRYP PFNGLUXTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
#endif
#ifndef __GLUX__GLFCT_glTexImage3DMultisample
typedef void (APIENTRYP PFNGLUXTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#endif
#ifndef __GLUX__GLFCT_glGetMultisamplefv
typedef void (APIENTRYP PFNGLUXGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);
#endif
#ifndef __GLUX__GLFCT_glSampleMaski
typedef void (APIENTRYP PFNGLUXSAMPLEMASKIPROC) (GLuint maskNumber, GLbitfield mask);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDrawElementsBaseVertex
extern PFNGLUXDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
#endif
#ifndef __GLUX__GLFCT_glDrawRangeElementsBaseVertex
extern PFNGLUXDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
#endif
#ifndef __GLUX__GLFCT_glDrawElementsInstancedBaseVertex
extern PFNGLUXDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
#endif
#ifndef __GLUX__GLFCT_glMultiDrawElementsBaseVertex
extern PFNGLUXMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
#endif
#ifndef __GLUX__GLFCT_glProvokingVertex
extern PFNGLUXPROVOKINGVERTEXPROC glProvokingVertex;
#endif
#ifndef __GLUX__GLFCT_glFenceSync
extern PFNGLUXFENCESYNCPROC glFenceSync;
#endif
#ifndef __GLUX__GLFCT_glIsSync
extern PFNGLUXISSYNCPROC glIsSync;
#endif
#ifndef __GLUX__GLFCT_glDeleteSync
extern PFNGLUXDELETESYNCPROC glDeleteSync;
#endif
#ifndef __GLUX__GLFCT_glClientWaitSync
extern PFNGLUXCLIENTWAITSYNCPROC glClientWaitSync;
#endif
#ifndef __GLUX__GLFCT_glWaitSync
extern PFNGLUXWAITSYNCPROC glWaitSync;
#endif
#ifndef __GLUX__GLFCT_glGetInteger64v
extern PFNGLUXGETINTEGER64VPROC glGetInteger64v;
#endif
#ifndef __GLUX__GLFCT_glGetSynciv
extern PFNGLUXGETSYNCIVPROC glGetSynciv;
#endif
#ifndef __GLUX__GLFCT_glGetInteger64i_v
extern PFNGLUXGETINTEGER64I_VPROC glGetInteger64i_v;
#endif
#ifndef __GLUX__GLFCT_glGetBufferParameteri64v
extern PFNGLUXGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
#endif
#ifndef __GLUX__GLFCT_glFramebufferTexture
extern PFNGLUXFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
#endif
#ifndef __GLUX__GLFCT_glTexImage2DMultisample
extern PFNGLUXTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
#endif
#ifndef __GLUX__GLFCT_glTexImage3DMultisample
extern PFNGLUXTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
#endif
#ifndef __GLUX__GLFCT_glGetMultisamplefv
extern PFNGLUXGETMULTISAMPLEFVPROC glGetMultisamplefv;
#endif
#ifndef __GLUX__GLFCT_glSampleMaski
extern PFNGLUXSAMPLEMASKIPROC glSampleMaski;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
