
// --------------------------------------------------------
// Generated by glux perl script (Fri Feb  7 10:09:04 2020)
// 
// Sylvain Lefebvre - 2002-2014 - Sylvain.Lefebvre@inria.fr
// --------------------------------------------------------
#if defined(_WIN32) || defined(_WIN64)
#  include <windows.h>
#endif
#ifdef __APPLE__
#  define GL_GLEXT_LEGACY
#endif

#ifndef GL_ARB_multitexture // hack due to MESA headers including GL_ARB_multitexture
#define GL_ARB_multitexture
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#else
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
#undef  GL_ARB_multitexture
#endif

#undef  GL_GLEXT_PROTOTYPES
#if defined(_WIN32) || defined(_WIN64)
#  include "glux_glext.h"
#  include "glux_wglext.h"
#else
#ifdef __APPLE__
//#  include "glux_glext_apple.h"
#  include "glux_glext.h"
#else
#ifdef EMSCRIPTEN
#  include "glux_glext.h"
#else
#  include <GL/glx.h>
#  include "glux_glext.h"
#  include "glux_glxext.h"
#endif
#endif
#endif
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_VERSION_4_0__
#define __GLUX_GL_VERSION_4_0__

GLUX_NEW_PLUGIN(GL_VERSION_4_0)
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#  ifndef GL_SAMPLE_SHADING
#    define GL_SAMPLE_SHADING 0x8C36
#  endif
#  ifndef GL_MIN_SAMPLE_SHADING_VALUE
#    define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#  endif
#  ifndef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
#    define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#  endif
#  ifndef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
#    define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#  endif
#  ifndef GL_TEXTURE_CUBE_MAP_ARRAY
#    define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#  endif
#  ifndef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
#    define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#  endif
#  ifndef GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
#    define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#  endif
#  ifndef GL_SAMPLER_CUBE_MAP_ARRAY
#    define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#  endif
#  ifndef GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
#    define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#  endif
#  ifndef GL_INT_SAMPLER_CUBE_MAP_ARRAY
#    define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#  endif
#  ifndef GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
#    define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#  endif
#  ifndef GL_DRAW_INDIRECT_BUFFER
#    define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#  endif
#  ifndef GL_DRAW_INDIRECT_BUFFER_BINDING
#    define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#  endif
#  ifndef GL_GEOMETRY_SHADER_INVOCATIONS
#    define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#  endif
#  ifndef GL_MAX_GEOMETRY_SHADER_INVOCATIONS
#    define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#  endif
#  ifndef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
#    define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#  endif
#  ifndef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
#    define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#  endif
#  ifndef GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
#    define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#  endif
#  ifndef GL_MAX_VERTEX_STREAMS
#    define GL_MAX_VERTEX_STREAMS 0x8E71
#  endif
#  ifndef GL_DOUBLE_VEC2
#    define GL_DOUBLE_VEC2 0x8FFC
#  endif
#  ifndef GL_DOUBLE_VEC3
#    define GL_DOUBLE_VEC3 0x8FFD
#  endif
#  ifndef GL_DOUBLE_VEC4
#    define GL_DOUBLE_VEC4 0x8FFE
#  endif
#  ifndef GL_DOUBLE_MAT2
#    define GL_DOUBLE_MAT2 0x8F46
#  endif
#  ifndef GL_DOUBLE_MAT3
#    define GL_DOUBLE_MAT3 0x8F47
#  endif
#  ifndef GL_DOUBLE_MAT4
#    define GL_DOUBLE_MAT4 0x8F48
#  endif
#  ifndef GL_DOUBLE_MAT2x3
#    define GL_DOUBLE_MAT2x3 0x8F49
#  endif
#  ifndef GL_DOUBLE_MAT2x4
#    define GL_DOUBLE_MAT2x4 0x8F4A
#  endif
#  ifndef GL_DOUBLE_MAT3x2
#    define GL_DOUBLE_MAT3x2 0x8F4B
#  endif
#  ifndef GL_DOUBLE_MAT3x4
#    define GL_DOUBLE_MAT3x4 0x8F4C
#  endif
#  ifndef GL_DOUBLE_MAT4x2
#    define GL_DOUBLE_MAT4x2 0x8F4D
#  endif
#  ifndef GL_DOUBLE_MAT4x3
#    define GL_DOUBLE_MAT4x3 0x8F4E
#  endif
#  ifndef GL_ACTIVE_SUBROUTINES
#    define GL_ACTIVE_SUBROUTINES 0x8DE5
#  endif
#  ifndef GL_ACTIVE_SUBROUTINE_UNIFORMS
#    define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#  endif
#  ifndef GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
#    define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#  endif
#  ifndef GL_ACTIVE_SUBROUTINE_MAX_LENGTH
#    define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#  endif
#  ifndef GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
#    define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#  endif
#  ifndef GL_MAX_SUBROUTINES
#    define GL_MAX_SUBROUTINES 0x8DE7
#  endif
#  ifndef GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
#    define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#  endif
#  ifndef GL_NUM_COMPATIBLE_SUBROUTINES
#    define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#  endif
#  ifndef GL_COMPATIBLE_SUBROUTINES
#    define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#  endif
#  ifndef GL_PATCHES
#    define GL_PATCHES 0x000E
#  endif
#  ifndef GL_PATCH_VERTICES
#    define GL_PATCH_VERTICES 0x8E72
#  endif
#  ifndef GL_PATCH_DEFAULT_INNER_LEVEL
#    define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#  endif
#  ifndef GL_PATCH_DEFAULT_OUTER_LEVEL
#    define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#  endif
#  ifndef GL_TESS_CONTROL_OUTPUT_VERTICES
#    define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#  endif
#  ifndef GL_TESS_GEN_MODE
#    define GL_TESS_GEN_MODE 0x8E76
#  endif
#  ifndef GL_TESS_GEN_SPACING
#    define GL_TESS_GEN_SPACING 0x8E77
#  endif
#  ifndef GL_TESS_GEN_VERTEX_ORDER
#    define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#  endif
#  ifndef GL_TESS_GEN_POINT_MODE
#    define GL_TESS_GEN_POINT_MODE 0x8E79
#  endif
#  ifndef GL_ISOLINES
#    define GL_ISOLINES 0x8E7A
#  endif
#  ifndef GL_FRACTIONAL_ODD
#    define GL_FRACTIONAL_ODD 0x8E7B
#  endif
#  ifndef GL_FRACTIONAL_EVEN
#    define GL_FRACTIONAL_EVEN 0x8E7C
#  endif
#  ifndef GL_MAX_PATCH_VERTICES
#    define GL_MAX_PATCH_VERTICES 0x8E7D
#  endif
#  ifndef GL_MAX_TESS_GEN_LEVEL
#    define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#  endif
#  ifndef GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
#    define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#  endif
#  ifndef GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
#    define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#  endif
#  ifndef GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
#    define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#  endif
#  ifndef GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
#    define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#  endif
#  ifndef GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
#    define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#  endif
#  ifndef GL_MAX_TESS_PATCH_COMPONENTS
#    define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#  endif
#  ifndef GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
#    define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#  endif
#  ifndef GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
#    define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#  endif
#  ifndef GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
#    define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#  endif
#  ifndef GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
#    define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#  endif
#  ifndef GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
#    define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#  endif
#  ifndef GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
#    define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#  endif
#  ifndef GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
#    define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#  endif
#  ifndef GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
#    define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#  endif
#  ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
#    define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#  endif
#  ifndef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
#    define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#  endif
#  ifndef GL_TESS_EVALUATION_SHADER
#    define GL_TESS_EVALUATION_SHADER 0x8E87
#  endif
#  ifndef GL_TESS_CONTROL_SHADER
#    define GL_TESS_CONTROL_SHADER 0x8E88
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK
#    define GL_TRANSFORM_FEEDBACK 0x8E22
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
#    define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
#    define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#  endif
#  ifndef GL_TRANSFORM_FEEDBACK_BINDING
#    define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#  endif
#  ifndef GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
#    define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#  endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glMinSampleShading
typedef void (APIENTRYP PFNGLUXMINSAMPLESHADINGPROC) (GLfloat value);
#endif
#ifndef __GLUX__GLFCT_glBlendEquationi
typedef void (APIENTRYP PFNGLUXBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);
#endif
#ifndef __GLUX__GLFCT_glBlendEquationSeparatei
typedef void (APIENTRYP PFNGLUXBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
#endif
#ifndef __GLUX__GLFCT_glBlendFunci
typedef void (APIENTRYP PFNGLUXBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);
#endif
#ifndef __GLUX__GLFCT_glBlendFuncSeparatei
typedef void (APIENTRYP PFNGLUXBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
#endif
#ifndef __GLUX__GLFCT_glDrawArraysIndirect
typedef void (APIENTRYP PFNGLUXDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);
#endif
#ifndef __GLUX__GLFCT_glDrawElementsIndirect
typedef void (APIENTRYP PFNGLUXDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);
#endif
#ifndef __GLUX__GLFCT_glUniform1d
typedef void (APIENTRYP PFNGLUXUNIFORM1DPROC) (GLint location, GLdouble x);
#endif
#ifndef __GLUX__GLFCT_glUniform2d
typedef void (APIENTRYP PFNGLUXUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);
#endif
#ifndef __GLUX__GLFCT_glUniform3d
typedef void (APIENTRYP PFNGLUXUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);
#endif
#ifndef __GLUX__GLFCT_glUniform4d
typedef void (APIENTRYP PFNGLUXUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#endif
#ifndef __GLUX__GLFCT_glUniform1dv
typedef void (APIENTRYP PFNGLUXUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniform2dv
typedef void (APIENTRYP PFNGLUXUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniform3dv
typedef void (APIENTRYP PFNGLUXUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniform4dv
typedef void (APIENTRYP PFNGLUXUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix2dv
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix3dv
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix4dv
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix2x3dv
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix2x4dv
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix3x2dv
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix3x4dv
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix4x2dv
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix4x3dv
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
#endif
#ifndef __GLUX__GLFCT_glGetUniformdv
typedef void (APIENTRYP PFNGLUXGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);
#endif
#ifndef __GLUX__GLFCT_glGetSubroutineUniformLocation
typedef GLint (APIENTRYP PFNGLUXGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glGetSubroutineIndex
typedef GLuint (APIENTRYP PFNGLUXGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glGetActiveSubroutineUniformiv
typedef void (APIENTRYP PFNGLUXGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
#endif
#ifndef __GLUX__GLFCT_glGetActiveSubroutineUniformName
typedef void (APIENTRYP PFNGLUXGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glGetActiveSubroutineName
typedef void (APIENTRYP PFNGLUXGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
#endif
#ifndef __GLUX__GLFCT_glUniformSubroutinesuiv
typedef void (APIENTRYP PFNGLUXUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);
#endif
#ifndef __GLUX__GLFCT_glGetUniformSubroutineuiv
typedef void (APIENTRYP PFNGLUXGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);
#endif
#ifndef __GLUX__GLFCT_glGetProgramStageiv
typedef void (APIENTRYP PFNGLUXGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
#endif
#ifndef __GLUX__GLFCT_glPatchParameteri
typedef void (APIENTRYP PFNGLUXPATCHPARAMETERIPROC) (GLenum pname, GLint value);
#endif
#ifndef __GLUX__GLFCT_glPatchParameterfv
typedef void (APIENTRYP PFNGLUXPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);
#endif
#ifndef __GLUX__GLFCT_glBindTransformFeedback
typedef void (APIENTRYP PFNGLUXBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);
#endif
#ifndef __GLUX__GLFCT_glDeleteTransformFeedbacks
typedef void (APIENTRYP PFNGLUXDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);
#endif
#ifndef __GLUX__GLFCT_glGenTransformFeedbacks
typedef void (APIENTRYP PFNGLUXGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);
#endif
#ifndef __GLUX__GLFCT_glIsTransformFeedback
typedef GLboolean (APIENTRYP PFNGLUXISTRANSFORMFEEDBACKPROC) (GLuint id);
#endif
#ifndef __GLUX__GLFCT_glPauseTransformFeedback
typedef void (APIENTRYP PFNGLUXPAUSETRANSFORMFEEDBACKPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glResumeTransformFeedback
typedef void (APIENTRYP PFNGLUXRESUMETRANSFORMFEEDBACKPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glDrawTransformFeedback
typedef void (APIENTRYP PFNGLUXDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);
#endif
#ifndef __GLUX__GLFCT_glDrawTransformFeedbackStream
typedef void (APIENTRYP PFNGLUXDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);
#endif
#ifndef __GLUX__GLFCT_glBeginQueryIndexed
typedef void (APIENTRYP PFNGLUXBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);
#endif
#ifndef __GLUX__GLFCT_glEndQueryIndexed
typedef void (APIENTRYP PFNGLUXENDQUERYINDEXEDPROC) (GLenum target, GLuint index);
#endif
#ifndef __GLUX__GLFCT_glGetQueryIndexediv
typedef void (APIENTRYP PFNGLUXGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glMinSampleShading
extern PFNGLUXMINSAMPLESHADINGPROC glMinSampleShading;
#endif
#ifndef __GLUX__GLFCT_glBlendEquationi
extern PFNGLUXBLENDEQUATIONIPROC glBlendEquationi;
#endif
#ifndef __GLUX__GLFCT_glBlendEquationSeparatei
extern PFNGLUXBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
#endif
#ifndef __GLUX__GLFCT_glBlendFunci
extern PFNGLUXBLENDFUNCIPROC glBlendFunci;
#endif
#ifndef __GLUX__GLFCT_glBlendFuncSeparatei
extern PFNGLUXBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
#endif
#ifndef __GLUX__GLFCT_glDrawArraysIndirect
extern PFNGLUXDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
#endif
#ifndef __GLUX__GLFCT_glDrawElementsIndirect
extern PFNGLUXDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
#endif
#ifndef __GLUX__GLFCT_glUniform1d
extern PFNGLUXUNIFORM1DPROC glUniform1d;
#endif
#ifndef __GLUX__GLFCT_glUniform2d
extern PFNGLUXUNIFORM2DPROC glUniform2d;
#endif
#ifndef __GLUX__GLFCT_glUniform3d
extern PFNGLUXUNIFORM3DPROC glUniform3d;
#endif
#ifndef __GLUX__GLFCT_glUniform4d
extern PFNGLUXUNIFORM4DPROC glUniform4d;
#endif
#ifndef __GLUX__GLFCT_glUniform1dv
extern PFNGLUXUNIFORM1DVPROC glUniform1dv;
#endif
#ifndef __GLUX__GLFCT_glUniform2dv
extern PFNGLUXUNIFORM2DVPROC glUniform2dv;
#endif
#ifndef __GLUX__GLFCT_glUniform3dv
extern PFNGLUXUNIFORM3DVPROC glUniform3dv;
#endif
#ifndef __GLUX__GLFCT_glUniform4dv
extern PFNGLUXUNIFORM4DVPROC glUniform4dv;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix2dv
extern PFNGLUXUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix3dv
extern PFNGLUXUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix4dv
extern PFNGLUXUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix2x3dv
extern PFNGLUXUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix2x4dv
extern PFNGLUXUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix3x2dv
extern PFNGLUXUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix3x4dv
extern PFNGLUXUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix4x2dv
extern PFNGLUXUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix4x3dv
extern PFNGLUXUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
#endif
#ifndef __GLUX__GLFCT_glGetUniformdv
extern PFNGLUXGETUNIFORMDVPROC glGetUniformdv;
#endif
#ifndef __GLUX__GLFCT_glGetSubroutineUniformLocation
extern PFNGLUXGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
#endif
#ifndef __GLUX__GLFCT_glGetSubroutineIndex
extern PFNGLUXGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
#endif
#ifndef __GLUX__GLFCT_glGetActiveSubroutineUniformiv
extern PFNGLUXGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
#endif
#ifndef __GLUX__GLFCT_glGetActiveSubroutineUniformName
extern PFNGLUXGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
#endif
#ifndef __GLUX__GLFCT_glGetActiveSubroutineName
extern PFNGLUXGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
#endif
#ifndef __GLUX__GLFCT_glUniformSubroutinesuiv
extern PFNGLUXUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
#endif
#ifndef __GLUX__GLFCT_glGetUniformSubroutineuiv
extern PFNGLUXGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
#endif
#ifndef __GLUX__GLFCT_glGetProgramStageiv
extern PFNGLUXGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
#endif
#ifndef __GLUX__GLFCT_glPatchParameteri
extern PFNGLUXPATCHPARAMETERIPROC glPatchParameteri;
#endif
#ifndef __GLUX__GLFCT_glPatchParameterfv
extern PFNGLUXPATCHPARAMETERFVPROC glPatchParameterfv;
#endif
#ifndef __GLUX__GLFCT_glBindTransformFeedback
extern PFNGLUXBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
#endif
#ifndef __GLUX__GLFCT_glDeleteTransformFeedbacks
extern PFNGLUXDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
#endif
#ifndef __GLUX__GLFCT_glGenTransformFeedbacks
extern PFNGLUXGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
#endif
#ifndef __GLUX__GLFCT_glIsTransformFeedback
extern PFNGLUXISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
#endif
#ifndef __GLUX__GLFCT_glPauseTransformFeedback
extern PFNGLUXPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
#endif
#ifndef __GLUX__GLFCT_glResumeTransformFeedback
extern PFNGLUXRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
#endif
#ifndef __GLUX__GLFCT_glDrawTransformFeedback
extern PFNGLUXDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
#endif
#ifndef __GLUX__GLFCT_glDrawTransformFeedbackStream
extern PFNGLUXDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
#endif
#ifndef __GLUX__GLFCT_glBeginQueryIndexed
extern PFNGLUXBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
#endif
#ifndef __GLUX__GLFCT_glEndQueryIndexed
extern PFNGLUXENDQUERYINDEXEDPROC glEndQueryIndexed;
#endif
#ifndef __GLUX__GLFCT_glGetQueryIndexediv
extern PFNGLUXGETQUERYINDEXEDIVPROC glGetQueryIndexediv;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
